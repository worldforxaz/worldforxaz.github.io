<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xaz的花花世界</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-03T02:16:34.583Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xaz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>名家集</title>
    <link href="http://example.com/2025/06/03/1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%90%8D%E5%AE%B6%E9%9B%86/"/>
    <id>http://example.com/2025/06/03/1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%90%8D%E5%AE%B6%E9%9B%86/</id>
    <published>2025-06-03T01:59:13.000Z</published>
    <updated>2025-06-03T02:16:34.583Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><blockquote><p>在此记录一些个人很喜欢的历史上的人物，会给出喜欢的理由和他们的生平介绍</p></blockquote><h1 id="1-路德维希·玻尔兹曼"><a href="#1-路德维希·玻尔兹曼" class="headerlink" title="1. 路德维希·玻尔兹曼"></a>1. 路德维希·玻尔兹曼</h1><img src="./../../图片/ludwig-boltzmann-portrait.jpeg" alt="ludwig-boltzmann-portrait" style="zoom: 33%;" /><p>* </p><h1 id="2-薛定谔"><a href="#2-薛定谔" class="headerlink" title="2. 薛定谔"></a>2. 薛定谔</h1><h1 id="3-朱自清"><a href="#3-朱自清" class="headerlink" title="3. 朱自清"></a>3. 朱自清</h1><h1 id="4-史铁生"><a href="#4-史铁生" class="headerlink" title="4. 史铁生"></a>4. 史铁生</h1><h1 id="5-王安石"><a href="#5-王安石" class="headerlink" title="5. 王安石"></a>5. 王安石</h1><h1 id="6-笛卡尔"><a href="#6-笛卡尔" class="headerlink" title="6. 笛卡尔"></a>6. 笛卡尔</h1><h1 id="7-刘慈欣"><a href="#7-刘慈欣" class="headerlink" title="7. 刘慈欣"></a>7. 刘慈欣</h1><h1 id="8-王立群"><a href="#8-王立群" class="headerlink" title="8. 王立群"></a>8. 王立群</h1><h1 id="9-李白"><a href="#9-李白" class="headerlink" title="9. 李白"></a>9. 李白</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此记录一些个人很喜欢的历史上的人物，会给出喜欢的理由和他们的生平介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-路德维希·玻尔兹曼&quot;&gt;&lt;a href=&quot;#1-路德维希·玻尔兹曼&quot; class=&quot;header</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>编译ACNN</title>
    <link href="http://example.com/2025/05/27/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%AF%91ACNN/"/>
    <id>http://example.com/2025/05/27/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BC%96%E8%AF%91ACNN/</id>
    <published>2025-05-27T01:30:30.000Z</published>
    <updated>2025-05-27T02:51:21.817Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-编译可使用ACNN势的lammps"><a href="#1-编译可使用ACNN势的lammps" class="headerlink" title="1. 编译可使用ACNN势的lammps"></a>1. 编译可使用ACNN势的lammps</h1><p>需要注意的点</p><ul><li><p>修改torchdemo-v3 里的prefix.cmake  修改里面openblas 和 torch的位置 </p></li><li><p>需要使用oneapi 来编译，因为需要用到mkl库</p><p>可以检查mpicxx -show  如果输出是icx 说明使用的是oneapi的编译器，如果输出是g++ ，说明使用的是openmpi </p></li><li><p>在interface 处sh bulid**.sh build</p></li><li><p>编译完成后，需要给出torch 和openblas的库文件位置以及source onempi 才能运行程序</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-编译可使用ACNN势的lammps&quot;&gt;&lt;a href=&quot;#1-编译可使用ACNN势的lammps&quot; class=&quot;headerlink&quot; title=&quot;1. 编译可使用ACNN势的lammps&quot;&gt;&lt;/a&gt;1. 编译可使用ACNN势的l</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于毕业论文</title>
    <link href="http://example.com/2025/04/16/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/%E5%85%B3%E4%BA%8E%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/"/>
    <id>http://example.com/2025/04/16/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/%E5%85%B3%E4%BA%8E%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/</id>
    <published>2025-04-16T02:29:27.000Z</published>
    <updated>2025-04-16T02:31:18.847Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c58f0a92fde60daf05aba79a36e05f0c00f433dd94983028d4c854f52c970dd">bda6ad0d5f606e7055c23f770369041ffa354e2b32a3834b155272c56f6444661ab7718603343a34c88aae20fc7454471ea25f2bf446205a6e0c3c512e3382d18684d1f39ffc2160101eedf9a9c1921c79e3b7f060e42f52505d7d4e245ac3e6440f5a6ac673744685875d76ad8b4041fb07f439ebb53b4250a386e8095159a4d3eaa727dce331e57c44488365c30ba2e7a3705f8e9e1fb2ccbacec4142ea887959eb02cce5283888538a79bd2d02848f1a740d1534328195c68896a1fd2a8959218e2098feb26048954fdacf02fcbcb4d74c15bc8c8e4cf5638dea23fac0f9d2e6be258dd267d6bcd526169157aa91c77b104fbf43ffe17972d70440383707e20bcaafc79c8d98de715601d29c6ef639b50f20abb33617db6043cbb76c8ef3e90ce4863c9372f9f922c755754a68de862510510be655855ca307c709032f18f031a57decac413adbae060843b60d1b30aae3b443541f50def21ce5ff6abf6b4c27445dd01c92136912cb450c869c0b5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="绘图与写作" scheme="http://example.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>vasp中的分子动力学系综</title>
    <link href="http://example.com/2025/04/14/3-%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/vasp%E6%A8%A1%E6%8B%9F/vasp%E4%B8%AD%E7%9A%84%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6%E7%B3%BB%E7%BB%BC/"/>
    <id>http://example.com/2025/04/14/3-%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/vasp%E6%A8%A1%E6%8B%9F/vasp%E4%B8%AD%E7%9A%84%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6%E7%B3%BB%E7%BB%BC/</id>
    <published>2025-04-14T01:17:38.000Z</published>
    <updated>2025-06-17T07:42:07.002Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-关于NPT系综"><a href="#1-关于NPT系综" class="headerlink" title="1.关于NPT系综"></a>1.关于NPT系综</h1><p>NPT系综中需要设置压力PSTRESS，在OUTCAR中，搜索关键词pressure会出现三个值</p><p><img src="/./../../../%E5%9B%BE%E7%89%87/image-20250414092020654.png" alt="image-20250414092020654"></p><p>其中，<code>in kB</code>行是压力矩阵的元素，前三个是主对角元元素，后面三个是非对角元元素</p><p>Pullay stress 是设置的PSTRESS的值，也就是外部压力（pstress)</p><p>external pressure是in kB行三个主对角元素平均值和Pullay stress的差值，对应于压力的波动量，这是结构的压力。</p><p><strong>由于有动能压力，导致内部会有一个内应力，动能压力总是正的，内应力也就是负数，对应于使得体积膨胀</strong></p><p>kinetic pressure 动能也会有一个压力，total pressure是最终的总压力，检查NPT是否平衡，计算这个值随步数的波动情况就可以</p><p>当有温度时，kinetic pressure不为0 ，且温度越高，kinetic pressure越大，external pressrure的值倾向于保持为负的kinetic pressure，这样，保持total pressure &#x3D; pullay stress，也就会导致热膨胀的出现</p><p><strong>不同的计算精度（ENCUT和KPOINTS对同一个结构计算的external pressure不同，尤其是对于大体系来说ENCUT, 如果要计算NPT来得到热膨胀效应，就必须要用相同的参数，不然可能会出现没有热膨胀，反而在设置的温度下体积相比结构优化的0 K下降的现象</strong></p><p>提取pressure的值</p><pre><code class="sh">grep &#39;total pressure&#39; OUTCAR | awk &#39;&#123;print NR, $4&#125;&#39; &gt; pressure.dat</code></pre><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltimport matplotlibmatplotlib.use(&#39;Agg&#39;)import argparse parser = argparse.ArgumentParser(description=&#39;deal two column data&#39;)parser.add_argument(&#39;filename&#39;)parser.add_argument(&#39;xlabel&#39;)parser.add_argument(&#39;ylabel&#39;)args = parser.parse_args()data_txt = args.filenamex_label = args.xlabely_label = args.ylabel# print(&#39;=&#39;*40)# filename = input(&#39;请输入文件名：&#39;).strip()# x_label = input(&quot;请输入x轴标签（直接回车可跳过）: &quot;).strip()# y_label = input(&quot;请输入y轴标签（直接回车可跳过）: &quot;).strip()# print(&quot;=&quot;*40)# data_txt = filename# x_label = x_label# y_label = y_labeldata = np.loadtxt(data_txt)plt.rcParams[&#39;font.size&#39;] = 16plt.rcParams[&#39;axes.linewidth&#39;] = 2plt.rcParams[&#39;axes.titlesize&#39;] = 16plt.rcParams[&#39;axes.labelsize&#39;] = 20plt.rcParams[&#39;axes.labelweight&#39;] = &#39;bold&#39;plt.rcParams[&#39;xtick.labelsize&#39;] = 16plt.rcParams[&#39;ytick.labelsize&#39;] = 16plt.rcParams[&#39;legend.fontsize&#39;] = 16figure = plt.figure(figsize=(8,6),dpi = 300)grid = figure.add_gridspec(1,1)ax1 = figure.add_subplot(grid[0,0])x = data[:,0]y = data[:,1]ax1.plot(x,y,linewidth=1.8)plt.xlabel(x_label)plt.ylabel(y_label)plt.xticks(fontweight = &#39;bold&#39;)plt.yticks(fontweight = &#39;bold&#39;)plt.legend(prop = &#123;&#39;weight&#39; :&#39;bold&#39;&#125;)plt.tight_layout()plt.savefig(&#39;plot.png&#39;,dpi = 300)</code></pre><h1 id="2-关于NVE系综"><a href="#2-关于NVE系综" class="headerlink" title="2. 关于NVE系综"></a>2. 关于NVE系综</h1><p>NVE系综是最简单的系综，只根据牛顿定律进行动力学演化，没有热浴和控压器的影响。NVT就是在NVE的基础上加一个控温器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-关于NPT系综&quot;&gt;&lt;a href=&quot;#1-关于NPT系综&quot; class=&quot;headerlink&quot; title=&quot;1.关于NPT系综&quot;&gt;&lt;/a&gt;1.关于NPT系综&lt;/h1&gt;&lt;p&gt;NPT系综中需要设置压力PSTRESS，在OUTCAR中，</summary>
      
    
    
    
    <category term="分子动力学" scheme="http://example.com/categories/%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/"/>
    
    <category term="vasp模拟" scheme="http://example.com/categories/%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6/vasp%E6%A8%A1%E6%8B%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode快捷键</title>
    <link href="http://example.com/2025/04/09/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2025/04/09/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2025-04-09T12:47:00.000Z</published>
    <updated>2025-04-09T12:49:28.919Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><ul><li>关闭文件 ctrl +w</li><li>打开终端 ctrl + &#96;</li><li>关闭终端 ctrl +&#96;</li><li>转换终端ctrl + pagedown&#x2F;pageup</li><li>新建终端 ctrl + shift  + &#96;</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭文件 ctrl +w&lt;/li&gt;
&lt;li&gt;打开终端 ctrl + &amp;#96;&lt;/li&gt;
&lt;li&gt;关闭终端 ctrl +&amp;#96;&lt;/li&gt;
&lt;li&gt;转换终端ctrl + pagedown&amp;#x2F;pageup&lt;/li&gt;
&lt;li&gt;新建</summary>
      
    
    
    
    <category term="linux学习使用" scheme="http://example.com/categories/linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>python绘图图案规范</title>
    <link href="http://example.com/2025/04/07/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/python%E7%BB%98%E5%9B%BE%E5%9B%BE%E6%A1%88%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2025/04/07/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/python%E7%BB%98%E5%9B%BE%E5%9B%BE%E6%A1%88%E8%A7%84%E8%8C%83/</id>
    <published>2025-04-07T01:12:00.000Z</published>
    <updated>2025-04-23T13:46:57.652Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-一行一列图"><a href="#1-一行一列图" class="headerlink" title="1. 一行一列图"></a>1. 一行一列图</h1><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltimport matplotlib.font_manager as fmfont_path = &#39;/usr/share/fonts/truetype/msttcorefonts/Times_New_Roman.ttf&#39;fm.fontManager.addfont(font_path)plt.rcParams[&#39;font.family&#39;] = &#39;Times New Roman&#39;plt.rcParams[&#39;axes.linewidth&#39;] = 4fig = plt.figure(figsize=(8,8),dpi = 300)grid = fig.add_gridspec(1,1)ax = fig.add_subplot(grid[0,0])data1 = np.loadtxt(&#39;li_energy.dat&#39;)sort_indices = np.argsort(data1[:, 0])data1 = data1[sort_indices]data2 = np.loadtxt(&#39;na_energy.dat&#39;)sort_indices = np.argsort(data2[:, 0])data2 = data2[sort_indices]data3 = np.loadtxt(&#39;k_energy.dat&#39;)sort_indices = np.argsort(data3[:, 0])data3 = data3[sort_indices]x = np.sort(data2[:,0])y1 = data1[:,1]y2 = data2[:,1]y3 = data3[:,1]y1_lowest = y1.min()y1_minus = y1 - y1_lowesty1_per_atom = y1_minus/ 132 * 1000y1_per_atom_pad = np.pad(y1_per_atom,(0,x.shape[0] - len(y1_per_atom)),&#39;constant&#39;,constant_values = np.nan)y2_lowest = y2.min()y2_minus = y2 - y2_lowesty2_per_atom = y2_minus/ 132 * 1000y2_per_atom_pad = np.pad(y2_per_atom,(0,x.shape[0] - len(y2_per_atom)),&#39;constant&#39;,constant_values = np.nan)y3_lowest = y3.min()y3_minus = y3 - y3_lowesty3_per_atom = y3_minus/ 132 * 1000y3_per_atom_pad = np.pad(y3_per_atom,(0,x.shape[0] - len(y3_per_atom)),&#39;constant&#39;,constant_values = np.nan)x = np.arange(1,21,1)ax.plot(x,y1_per_atom_pad[0:20],label=&#39;Li&#39;)ax.scatter(x,y1_per_atom_pad[0:20])ax.plot(x,y2_per_atom_pad[0:20],label=&#39;Na&#39;)ax.scatter(x,y2_per_atom_pad[0:20])ax.plot(x,y3_per_atom_pad[0:20],label=&#39;K&#39;)ax.scatter(x,y3_per_atom_pad[0:20])ax.set_ylabel(&#39;Energy relative the lowest energy per atom (meV)&#39;, fontsize = 35,fontname=&#39;Times New Roman&#39;,fontweight=&quot;bold&quot;)plt.xticks(fontsize = 30,fontname = &quot;Times New Roman&quot;,fontweight = &quot;bold&quot;)plt.yticks(fontsize = 30,fontname = &quot;Times New Roman&quot;,fontweight = &quot;bold&quot;)plt.legend(prop=&#123;&#39;family&#39;: &#39;Times New Roman&#39;, &#39;weight&#39;: &#39;bold&#39;, &#39;size&#39;: 25&#125;)plt.gca().xaxis.set_major_locator(plt.MaxNLocator(4))plt.savefig(&#39;plot.png&#39;,dpi = 1000)plt.show()</code></pre><h1 id="2-一行两列图"><a href="#2-一行两列图" class="headerlink" title="2. 一行两列图"></a>2. 一行两列图</h1><pre><code class="python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.family&#39;] = &#39;Times New Roman&#39;plt.rcParams[&#39;font.size&#39;] = 12plt.rcParams[&#39;axes.titlesize&#39;] = 16plt.rcParams[&#39;axes.labelsize&#39;] = 14plt.rcParams[&#39;xtick.labelsize&#39;] = 12plt.rcParams[&#39;ytick.labelsize&#39;] = 12plt.rcParams[&#39;legend.fontsize&#39;] = 12plt.rcParams[&#39;axes.linewidth&#39;] = 1.5fig, axs = plt.subplots(1, 2, figsize=(12, 5), dpi=300)for ax in axs:    ax.plot([1,2,3], [4,5,6], linewidth=1.8, marker=&#39;o&#39;, markersize=7)    ax.set_xlabel(&quot;X轴&quot;, fontsize=14)    ax.set_ylabel(&quot;Y轴&quot;, fontsize=14)    ax.legend([&quot;数据&quot;], frameon=True)plt.tight_layout()plt.savefig(&#39;figure.png&#39;,dpi=600)plt.savefig(&#39;figure.pdf&#39;,dpi=600)plt.show()</code></pre><h1 id="3-两行两列图"><a href="#3-两行两列图" class="headerlink" title="3. 两行两列图"></a>3. 两行两列图</h1><pre><code class="python">import matplotlib.pyplot as pltplt.rcParams[&#39;font.family&#39;] = &#39;Times New Roman&#39;plt.rcParams[&#39;font.size&#39;] = 12plt.rcParams[&#39;axes.titlesize&#39;] = 16plt.rcParams[&#39;axes.labelsize&#39;] = 14plt.rcParams[&#39;xtick.labelsize&#39;] = 12plt.rcParams[&#39;ytick.labelsize&#39;] = 12plt.rcParams[&#39;legend.fontsize&#39;] = 12plt.rcParams[&#39;axes.linewidth&#39;] = 1.5fig, axs = plt.subplots(2, 2, figsize=(10, 8), dpi=300)for ax in axs.flat:    ax.plot([1,2,3], [4,5,6], linewidth=1.8, marker=&#39;o&#39;, markersize=7)    ax.set_xlabel(&quot;X轴&quot;, fontsize=14)    ax.set_ylabel(&quot;Y轴&quot;, fontsize=14)    ax.legend([&quot;数据&quot;], frameon=True)plt.tight_layout()plt.show()</code></pre><h1 id="4-处理-1-2数据"><a href="#4-处理-1-2数据" class="headerlink" title="4. 处理 1*2数据"></a>4. 处理 1*2数据</h1><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltimport matplotlibmatplotlib.use(&#39;Agg&#39;)import argparse parser = argparse.ArgumentParser(description=&#39;deal two column data&#39;)parser.add_argument(&#39;filename&#39;)parser.add_argument(&#39;xlabel&#39;)parser.add_argument(&#39;ylabel&#39;)args = parser.parse_args()data_txt = args.filenamex_label = args.xlabely_label = args.ylabel# print(&#39;=&#39;*40)# filename = input(&#39;请输入文件名：&#39;).strip()# x_label = input(&quot;请输入x轴标签（直接回车可跳过）: &quot;).strip()# y_label = input(&quot;请输入y轴标签（直接回车可跳过）: &quot;).strip()# print(&quot;=&quot;*40)# data_txt = filename# x_label = x_label# y_label = y_labeldata = np.loadtxt(data_txt)plt.rcParams[&#39;font.size&#39;] = 16plt.rcParams[&#39;axes.linewidth&#39;] = 2plt.rcParams[&#39;axes.titlesize&#39;] = 16plt.rcParams[&#39;axes.labelsize&#39;] = 20plt.rcParams[&#39;axes.labelweight&#39;] = &#39;bold&#39;plt.rcParams[&#39;xtick.labelsize&#39;] = 16plt.rcParams[&#39;ytick.labelsize&#39;] = 16plt.rcParams[&#39;legend.fontsize&#39;] = 16figure = plt.figure(figsize=(8,6),dpi = 300)grid = figure.add_gridspec(1,1)ax1 = figure.add_subplot(grid[0,0])x = data[:,0]y = data[:,1]ax1.plot(x,y,linewidth=1.8)plt.xlabel(x_label)plt.ylabel(y_label)plt.xticks(fontweight = &#39;bold&#39;)plt.yticks(fontweight = &#39;bold&#39;)plt.legend(prop = &#123;&#39;weight&#39; :&#39;bold&#39;&#125;)plt.tight_layout()plt.savefig(&#39;plot.png&#39;,dpi = 300)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-一行一列图&quot;&gt;&lt;a href=&quot;#1-一行一列图&quot; class=&quot;headerlink&quot; title=&quot;1. 一行一列图&quot;&gt;&lt;/a&gt;1. 一行一列图&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;import numpy</summary>
      
    
    
    
    <category term="绘图与写作" scheme="http://example.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>bader电荷分析</title>
    <link href="http://example.com/2025/02/17/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/bader%E7%94%B5%E8%8D%B7%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2025/02/17/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/bader%E7%94%B5%E8%8D%B7%E5%88%86%E6%9E%90/</id>
    <published>2025-02-17T06:21:06.000Z</published>
    <updated>2025-02-17T06:59:41.382Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p><a href="https://theory.cm.utexas.edu/henkelman/code/bader/">https://theory.cm.utexas.edu/henkelman/code/bader/</a></p><p>VASP从入门到入土：Bader电荷的计算 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/673557738">https://zhuanlan.zhihu.com/p/673557738</a></p><p><code> LAECHG=.TRUE.</code></p><pre><code class="shell"> chgsum.pl AECCAR0 AECCAR2 bader CHGCAR -ref CHGCAR_sum</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://theory.cm.utexas.edu/henkelman/code/bader/&quot;&gt;https://theory.cm.utexas.edu/henkelman/code/bader/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;V</summary>
      
    
    
    
    <category term="模拟方法" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>mattersim-x</title>
    <link href="http://example.com/2025/02/14/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/mattersim-x/"/>
    <id>http://example.com/2025/02/14/7-%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/mattersim-x/</id>
    <published>2025-02-14T05:55:22.000Z</published>
    <updated>2025-02-14T07:34:03.090Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="251d28366651491a34ed14522ea40a4a246c7bec4c14851fc77911100d4a6db5">bda6ad0d5f606e7055c23f770369041ffa354e2b32a3834b155272c56f644466c4caffc90caceb42d13814dd06f93cc627f3b34c248b4cf9bf9d8624b1c6e4304406d41f8dbaaa74519476795b287ea344d9951e8f500bfdd2f1e01ce5df70870482c1ae30c526e1f3cec924b631022ca3f66e1e9a43a3fadf01ab2f4babd4971968fddec420787568f5f2b3f59049b7eb9f190f923f29a835475e73980583f77ce9fa66789c976fcb8840291b3442f33bfcf8c1a36f58ec4ef2e1edbd524722a9b168821f9924a7ee89f373c1a515b954c9a3e63f093356d46ba0291c6e46c56c989dfb4798bd96a4272a7f6a66c835856f572cd631841a20a6fd636d6f947ec384553efc32013ede6bd76291133447e82ebda4282a207d1de4be09d56a1fbf7eb99cf22986abcafd0198a748950f172e81fb779a7b98207e156691e3191d3b67760e92191ef63145c56e78be708a6938e4abd8b1f411c6fbd5adbe0a36b4688323b214812bb06e3c9ae5ea703bb3f3f9736c0bbac957af3bbf1e6d05bc2ed5b5f963d07f7a9b1d6d60c5f4c3842b86db487885ecb75712436a3ba146a0c7a1e72ac6cb0edb182883f5ea6af08b33ffb524bccb31f5eeb0f1cb90801808806ce007edeab1b73e3eb661d8811ae5e86826cbba8c2d276248d57657468cd9d6f9d9a1b368ac8d97da5de6eeb83de701cff2f8a09ecfca6a691e7c2a8602a8945c049354762dc575449fe5c8fc2803190c353ff82be1c6adc05f7c133af635506f2418b80cb7421ed0ac4ad348850ba9282f45e27fda30b7266106afe8cb3c9d296d5688d0213b1d9eca245363563fc9e8b4a8300b17f9dc41097034d3f542dc51e6d5774d9f101ed454cc9c494d1e91b1a404253654edeb539f38b73caebbb619992c279801cde55c82817fc07fa3fe2811c05327bdfadd6f1333ba051572058e390148268bdd28d1dd97d177587f2fdbab375342c642e7214843538f7ff933cde1699b2ddf97c2e6b9f5fad0c60f1849ff09507d4c46aff44a5fa19bb9758befe75daa1ff6a36058f500fac1f5055e0b4581b79fe4b42d8f80db816d8af62bd3e61f54eac0ffefe993bde450ee2ebd1aa5cea2ae8041b67c4043c7f737550c1f71873dd4be274e83daedd1b0a9f23a0eab06a346a4fb6d0f93c8060bcb804acdbeef93d90859b5ff46e8d28949234f401684a6535e37c5e061bafbf4f58433fbaa9f98d768e7cb576c4b26f9efe2228450120546a6c58027e72b69e2136a84203022e0c501c7559a62d3c1b2ebbb3297116350e7ca884d36e6cc44afa5f1703a6b0b0be8b09976bada4872621a29bbd4a75a483fbdc56c64a89ff4132f7dc2e18912f0fed2dbd2026e7e42eeb50d23baffc9cf7eaf553a944546d21ae5984a6cac760435ad38b7478bad76bfb1b78313ef46e38070e9f096882239a9af28b360b3581dda5ec738046361fbe9e45dd19d01e2e13a74c08ac032d4729ef8d0a8a8dc2c56cf81b8be1bb42cd5760bfd6d43f90906e70700609b7d2c33041a840732fdee22bdaaf7d97587f84d7808d94533ceee3a734f7d19ccfe2fb330446bfe65260b81d3acccaa43f4216423daf1c055a409145988886943a364a33128f50c3efb2012f90431e501407361600eb85922d80bd348a6aecc405766c94db5c3e9c7cde985e65ae0a25eaf91d7bfc490dfc1e134a669b23617f8520c613590f161193db020565e2dfe24a111014323ed6df68df227047e0e0512a3c8e1e8e3818d495a40a0019e7569a1aedc441028b0c3673663f65242ef5b61d8953e1f98f8d9723f28b3e48cf21053ca3a27ff2fb774735dbca18879622de270bb9b84cc7b1bf66f3c7791881f4a1c1b48757e9f8043559619c0e3b3086a958223f168151d05820242a1a1e61f1bdbbe3fe0258a65576f873149c866deb48097b34e77c42d8e11677f18fc1a076d78332452a4b944ffa7f377b33fe407397af07157703a8b5c99e4ce44553dbb2d1abdefde6855e4b337989d4e93777657d86cdd9360f666f5d02a3c4746284ef0859132fe71583dbb4c243851ccd04c163bb2a48fcde3434109c9e7ed559511fc8be0897ba5593f7f90b21ec3b8e09773e72ca12cdeb0c511b8c7dc7055bb12b7f37c568d12a2ac56b2facfe828a93049e003fa91c8584484e2d2f2f4ce1b1e3d7ce8742d9d5db4e6cb0ec8c65e2d7e5857758f2bd8e80bd66da87bcb80888abba814c4d3270d15adfcb1c2a167680fdda6781b090a1f811dbc0ff378023d5a6c4e997852b8d4f8cff48fb8bba0edb823b8ea92202bdb39550efba06accd7cda1a80dfe83f34ca860736aa84ceecf4534fb8bbf37388e3e64966495b77fc204e976935c81e5563d4372b65579175f68a2cd7b89567e10262e3818ac7a5a7f119d1b52e5efd3635fadee9c34025bd4ae1915bc80041925544cb6f3b762f22e32177cfa997f35c9c51c6b2a7234876b909eb8b177dc93e104cc55301b4e20d5f15609bd76957e4d99a79ad5e43657b6334999e12091eea2000263f25358b8a1c5a8076b7f7e502df5510ae287cdad61fdcee2fa477dc0128b7a8041e1edadc1e309797bc067ecfdcecc041d260871b227035cdaae3a8dc4846668b5564e9c415f0fcc251f114bfc0e0c3a9ca5ef822ad3ed198af968a49b414cb903142dd3d89bb3050dc1769c3a422e89b5e753fcd10730324a5a2dfd7c2a7d73fce0280349c0233fc24394747b829fd086aa2254a20ccad4c1085ad3952fbeaedfd752179286411e7c5581f788243741ab656181243a1a315e1dd9d0f89add2048661bf38c21589ec9d9c04dd54e3da775f79ba1d3c7dc828579107e028ac12b079b700e1cd43cdb3fa233542c8fe5639937c9d1dbaeb009197d011ce779fd61410fc0ae80c945120b24cd2de6ec56835350cbc4026a92d4c2521479e09d65ef6a7e2e37f392f1ba964258aa5ac9d4573bec553e13da39d62b553af0ae1a5f023914fc1433f59f8860026f82a545ea543048373353eeedc40ca5a887c9e9a8c230f9afe74bbf3664d678b484f18dcfe6d2f436c3645994d1b6d6782e650e46e7351bcbf0bbf855ca6a10471c30c55a78a1a9549a82a81fb782dadfd0750178701f53092f4d4ef5e9bd770bd61367092f2fdb8a1fa82110bca27027ef2be65b4e4410fc16b8eef12496b5120b24f32772e4f6d5033c8ad29401ac0eb4276b0df1273e5e9b98e8ab9b8ef43b709d90e8de00c073002b7d00a0c63b8861ab203dd35508a4be5277e739066ea769e534ed20a523f851a4ed08793d077d7ffedee21696ad1165a9c5f1f3fd3bca000fb013b37b709de3bef2d25f896cabb67dbebed93af99b43b7254e84029c23e7ae2139d43bbe45a7a19918fdab4a18a79f21dad3e2cd5c865dfdea208e5b09afe0cdde5c5832f4129fa7ec309a64b27dffa2e754f144db8d21c57373b9f0ec402e99f42b9979e617927693b7ea07a5b6304457cccfea90f350a5b067c68fdfc7c88b7aa85d500b5bd1cdbf1f884c86b96f647bc74c06be58522a5e56642783f1c4f33eb7460eedf376e5834c83a252bc0e5c142aa2c61d551cc479bafb7dff9c96360a0da259c34ab1b8c7540aae7fb190fccf90674cb0722db5f3be1cdb2735f288df809caaa1aea09b5baaa1d2fd17914fc21dc1f721d8e563ccbab925855d3d6cbc1e8e930da5f30d4567db3beda9fda0bfd6286183808a2c79a3dadbedc40af9c37cdfe937a6bb67cb9c2b03a697d199c3fd2a5f991e5b219598cfc9ebc20ee9c6bc49263a24d9328f24d82330bf44976aec908d750beaa501995351b5f5837ecd4fe43ddee94105d3850d272cd413275191946017b2f71b69ae4cb38781623abcc8d5bdb76150f2cfd1562a71709c054c953f63b1267bb0adcf5640c86df57245bef5a792bf169c7efd10c757ed508e3084663992802bbc426d03a693fea62eaf40c586c3dd318d845af2f6386454cfce0d759042900534c5c34be1538dacfb49df91c7921cca070d9ac7655966aac2741f49a80f71e9bf5e865b0bf9eb14139cef40fe2de1350bfb0cace86ca6073eeda7c560dcb52e58444cccafafa506cc1f84faacdb6c331316d2e1fd851c592659344705e0be3ef998c8800b586e86025b1bd56b664e348c6b4504bfb23654ba380225f15f63c14f195a6d066aac888cb445f1b58545f5a1cf08e1c7cf79d3850dc6264002517ac2ff0ed1ac37332003e09fe7a88f5ddfd49265187572af7ee94de15d3edb1024dc91e23cd37d8f0c8f98ab3764a3cadc876ac904e144356767a68e98b7a886c808a6e5c051a54b3a88a7d65f89f4f65dada1ca534bde2a042b9f156ae91864a18348e74a1c6b3eb05447b3b3108065ec82e9895e2152072694fd991c78dde472997f6c28258104b0a0d8dc57486808a124786a32e157a807330913279fbd1993d5f915c02058973d7460da6b7647e2390f6463ae96948ccebf3ae7cfe80341fd2229b67b53d31aa6bae659089f55179612c16ce927d8a569d0c039988cd4f2e90bb538bc54947c6f6e7a5e159553814ee690c7a97a163a3fd9bbcd001de029d1d8ef5c7c2d039b026a2103c03ce6a6384f173fcf078b53eae9055321f8dedb864049031d03428c0250c9d0c72d29663c53fd4227f0b658d1769e7f831f8a4d3d2ebfde85b6da165da57f8cd0a038b4cb54448a95c378a1e4b8438c37a486f7fb215babb7ebff0245ed7b5a582827df46a7f5381e7e9bb662146afc30ca9831dfb924839ea1e47d02462dba08b4a108cbcff649ee076007ab635eb8fca49c86aaa8593e8bdb989e42dd20d0064c7c3d7d7507ab3d93707ce8afc02437d8c16cee816e01f5f15a22ac657794807747654ba794c639a7318cad4b09e09cfabc941e9cabb4769b41511ba2eb4d1a2f576c6088e1d87c3c71a4bdaf2041ab1b9a2e31675333d1a85c2cb29a8fcf808e542a34440f6e74d5f69627df061a31d15100ce8d45d6fe53198eedea12a943d4b4521a235332dbeedf0fed2bda728f4b2a4f97b03711bf2010bfa325c7d0c96e5155839e1417846e715340bea5f3dbeef68b7b86fbd564fe1787efed581eb03d56dbaead212d83129e42a1c934fe97ec8f0a846996838d44d5ee539449ec2b309cbe643f42393a07632333a30144de7317013f76dc831682bdc313262e9c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="绘图与写作" scheme="http://example.com/categories/%E7%BB%98%E5%9B%BE%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>功函数计算</title>
    <link href="http://example.com/2025/02/11/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/%E5%8A%9F%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2025/02/11/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/%E5%8A%9F%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97/</id>
    <published>2025-02-11T03:18:17.000Z</published>
    <updated>2025-02-11T06:59:46.385Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-参考vaspkit的Au111表面功函数计算"><a href="#1-参考vaspkit的Au111表面功函数计算" class="headerlink" title="1. 参考vaspkit的Au111表面功函数计算"></a>1. 参考vaspkit的Au111表面功函数计算</h1><blockquote><p><a href="https://vaspkit.com/tutorials.html#potential-related">https://vaspkit.com/tutorials.html#potential-related</a></p><p><a href="http://bbs.keinsci.com/thread-27563-1-1.html">http://bbs.keinsci.com/thread-27563-1-1.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-参考vaspkit的Au111表面功函数计算&quot;&gt;&lt;a href=&quot;#1-参考vaspkit的Au111表面功函数计算&quot; class=&quot;headerlink&quot; title=&quot;1. 参考vaspkit的Au111表面功函数计算&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="模拟方法" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大模型</title>
    <link href="http://example.com/2025/01/21/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2025/01/21/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2025-01-21T13:22:55.000Z</published>
    <updated>2025-06-16T12:41:21.611Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-原子大模型排名"><a href="#1-原子大模型排名" class="headerlink" title="1. 原子大模型排名"></a>1. 原子大模型排名</h1><p><a href="https://matbench-discovery.materialsproject.org/">https://matbench-discovery.materialsproject.org/</a></p><h1 id="2-使用ASE结合mattersim进行结构优化、分子动力学"><a href="#2-使用ASE结合mattersim进行结构优化、分子动力学" class="headerlink" title="2. 使用ASE结合mattersim进行结构优化、分子动力学"></a>2. 使用ASE结合mattersim进行结构优化、分子动力学</h1><h2 id="1-使用ASE进行包括晶胞的结构优化"><a href="#1-使用ASE进行包括晶胞的结构优化" class="headerlink" title="1. 使用ASE进行包括晶胞的结构优化"></a>1. 使用ASE进行包括晶胞的结构优化</h2><pre><code class="python">from mattersim.applications.moldyn import MolecularDynamicsfrom ase.io import read, writefrom mattersim.forcefield import MatterSimCalculatorfrom mattersim.applications.relax import Relaxerimport numpy as npfrom ase.optimize import LBFGSfrom ase.filters import ExpCellFilterfrom ase.io import Trajectory# calc = MatterSimCalculator(device=&#39;cuda&#39;)# calc = MatterSimCalculator(device=&#39;cuda:0&#39;)calc = MatterSimCalculator(load_path=&quot;MatterSim-v1.0.0-5M.pth&quot;, device=&#39;cuda:0&#39;)#relaxer = Relaxer(#    optimizer=&quot;BFGS&quot;, # the optimization method FIRE, BFGS#    filter=None, # filter to apply to the cell#    constrain_symmetry=True, # whether to constrain the symmetry#)atoms = read(&quot;POSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcecf = ExpCellFilter(atoms)traj = Trajectory(&#39;optimization.traj&#39;, &#39;w&#39;, atoms)#converged, relaxed_structure = relaxer.relax_structures(atoms,optimizer=&quot;BFGS&quot;, # the optimization method FIRE, BFGS#    filter=None, #    constrain_symmetry=True, fmax=0.01 )opt = LBFGS(ecf)opt.attach(traj.write, interval=1)opt.run(fmax=0.01) write(&quot;POSCAR.vasp&quot;, atoms, format=&quot;vasp&quot;)</code></pre><h2 id="2-from-wangq"><a href="#2-from-wangq" class="headerlink" title="2. from wangq"></a>2. from wangq</h2><pre><code class="python">from mattersim.applications.moldyn import MolecularDynamicsfrom ase.io import read, writefrom mattersim.forcefield import MatterSimCalculatorfrom mattersim.applications.relax import Relaxerimport numpy as np# calc = MatterSimCalculator(device=&#39;cuda&#39;)calc = MatterSimCalculator(load_path=&quot;MatterSim-v1.0.0-5M.pth&quot;, device=&#39;cuda:2&#39;)#默认是1M参数大模型，下面的是5M的relaxer = Relaxer(    optimizer=&quot;BFGS&quot;, # the optimization method FIRE, BFGS    filter=None, # filter to apply to the cell    constrain_symmetry=True, # whether to constrain the symmetry)atoms = read(&quot;SPOSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcconverged, relaxed_structure = relaxer.relax_structures(atoms,optimizer=&quot;FIRE&quot;, # the optimization method FIRE, BFGS    filter=None,     constrain_symmetry=True, fmax=0.1 )# # 获取晶胞矩阵# cell =   relaxed_structure.get_cell()# # 尝试使用 Cholesky 分解将晶胞矩阵转换为上三角矩阵# try:#     # 确保晶胞矩阵是正定的#     upper_triangular = np.linalg.cholesky(cell.dot(cell.T)).T# except np.linalg.LinAlgError:#     # 如果 Cholesky 分解失败，使用 QR 分解#     _, upper_triangular = np.linalg.qr(cell)# # 更新   relaxed_structure 对象的晶胞矩阵# relaxed_structure.set_cell(upper_triangular, scale_atoms=True)relaxed_structure.calc = calcensemble = &quot;NVT_BERENDSEN&quot;temperature = 1000timestep = 1.0taut = 100trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;nvt_runner = MolecularDynamics(atoms=relaxed_structure, ensemble=ensemble, temperature=temperature, timestep=timestep, taut=taut, trajectory=trajectory, logfile = logfile)nvt_runner.run(1000000)</code></pre><h2 id="3-处理vaspkit-的MSD-dat得到电导率"><a href="#3-处理vaspkit-的MSD-dat得到电导率" class="headerlink" title="3. 处理vaspkit 的MSD.dat得到电导率"></a>3. 处理vaspkit 的MSD.dat得到电导率</h2><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltfrom scipy.stats import linregressdef dealMSD(inputfile):    data = np.loadtxt(inputfile,skiprows = 1 )    data[:,0] = data[:,0] / 1000    n = data.shape[0]    start_idx = int(n*0.05)    end_idx = int(n*0.95)    time = data[start_idx:end_idx,0]    MSD = data[start_idx:end_idx,4]    slope, intercept, r_value, _, _ = linregress(time, MSD)    MSD_fit = slope * time + intercept        fig,ax1 = plt.subplots(figsize=(4,3),dpi = 600)    ax1.plot(data[:, 0], data[:, 4],             label=&#39;600 K&#39;,             linewidth=2,          # 更粗的线条            color=&#39;#2ecc71&#39;,      # 柔和的绿色            alpha=0.8)      ax1.plot(time, MSD_fit, label=f&#39;Fit: y = &#123;slope:.2f&#125;x + &#123;intercept:.2f&#125;&#39;, color=&#39;red&#39;)    ax1.set_xlabel(&#39;t (ps)&#39;)    ax1.set_ylabel(r&#39;MSD ($\AA^2$)&#39;)    ax1.legend()    ax1.grid(True)    output_filename = inputfile.replace(&#39;/&#39;,&#39;-&#39;) + &#39;.png&#39;    plt.savefig(output_filename, bbox_inches=&#39;tight&#39;)    plt.close()#    plt.show()    return slopediffD = []temp = [600, 800,1000]for i in temp:    inputfile = f&quot;&#123;i&#125;/msd/MSD.dat&quot;    try:        slope = dealMSD(inputfile)        diffuD = slope / 60000        diffD.append(diffuD)    except FileNotFoundError:        print(f&quot;文件 &#123;inputfile&#125; 不存在&quot;)        diffD.append(0)logdiffD = np.log10(diffD)temp_inv = np.array([1000 / i for i in temp]) slope_D, intercept_D, _, _, _ = linregress(temp_inv, logdiffD)temp_inv_fit = np.linspace(1, 3.3, 100)logDfit = slope_D * temp_inv_fit + intercept_D#logDfit = slope_D * temp_inv + intercept_Dfig,ax1 = plt.subplots(figsize=(4,3),dpi = 600)ax1.plot(temp_inv_fit, logDfit, label=f&#39;Fit: y = &#123;slope_D:.2f&#125;x + &#123;intercept_D:.2f&#125;&#39;, color=&#39;red&#39;)ax1.scatter(temp_inv, logdiffD,color = &#39;blue&#39;,marker = &#39;o&#39;)ax1.set_xlabel(&#39;1000/T (1/K)&#39;)ax1.set_ylabel(r&#39;log10(D) (Å$^2$/ps)&#39;)ax1.set_xlim(0.9, 3.5)ax1.set_ylim(slope_D * 3.5 + intercept_D, slope_D * 0.9 + intercept_D+ 0.3)y_min = slope_D * 3.5 + intercept_Dy_max = slope_D * 0.9 + intercept_D + 0.3y_ticks = np.arange(np.floor(y_min / 0.5) * 0.5, np.ceil(y_max / 0.5) * 0.5, 0.5)ax1.set_yticks(y_ticks)ax1.legend()ax1.grid(True)plt.savefig(&#39;arrnius.png&#39;,bbox_inches=&#39;tight&#39;)from pymatgen.core import Structurestructure = Structure.from_file(&quot;POSCAR&quot;)volume = structure.volumeatomsnumber = 30Eanumber = 0.198691478T = 300logD300 = slope_D * (1000 / T) + intercept_DD = 10 ** logD300sigma300 = 1.858 * atomsnumber / volume / 300 * (10**12) * DEa = -Eanumber * slope_Dprint(Ea, sigma300)</code></pre><h2 id="4-mattersim-MD直接输出MSD"><a href="#4-mattersim-MD直接输出MSD" class="headerlink" title="4. mattersim-MD直接输出MSD"></a>4. mattersim-MD直接输出MSD</h2><pre><code class="python">from mattersim.applications.moldyn import MolecularDynamicsfrom ase.io import read, writefrom mattersim.forcefield import MatterSimCalculatorfrom mattersim.applications.relax import Relaxerimport numpy as npimport os# calc = MatterSimCalculator(device=&#39;cuda&#39;)# calc = MatterSimCalculator(device=&#39;cuda:0&#39;)calc = MatterSimCalculator(load_path=&quot;MatterSim-v1.0.0-1M.pth&quot;, device=&#39;cuda:0&#39;)relaxer = Relaxer(    optimizer=&quot;BFGS&quot;, # the optimization method FIRE, BFGS    filter=None, # filter to apply to the cell    constrain_symmetry=True, # whether to constrain the symmetry)atoms = read(&quot;POSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcconverged, relaxed_structure = relaxer.relax_structures(atoms,optimizer=&quot;BFGS&quot;, # the optimization method FIRE, BFGS    filter=None,     constrain_symmetry=True, fmax=0.01 )# # 获取晶胞矩阵# cell =   relaxed_structure.get_cell()# # 尝试使用 Cholesky 分解将晶胞矩阵转换为上三角矩阵# try:#     # 确保晶胞矩阵是正定的#     upper_triangular = np.linalg.cholesky(cell.dot(cell.T)).T# except np.linalg.LinAlgError:#     # 如果 Cholesky 分解失败，使用 QR 分解#     _, upper_triangular = np.linalg.qr(cell)# # 更新   relaxed_structure 对象的晶胞矩阵# relaxed_structure.set_cell(upper_triangular, scale_atoms=True)relaxed_structure.calc = calc# import torch# torch.cuda.empty_cache() ensemble = &quot;NVT_BERENDSEN&quot;temperature = 600timestep = 2.0taut = 100trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;  nvt_runner = MolecularDynamics(atoms=relaxed_structure, ensemble=ensemble, temperature=temperature, timestep=timestep, taut=taut, trajectory=trajectory, loginterval=1,logfile = logfile)nvt_runner.run(250000)#将轨迹写入XDATCARatoms_xda = read(&#39;atoms.traj&#39;, index=&#39;:&#39;)write(&#39;XDATCAR&#39;, atoms_xda)os.remove(&#39;atoms.traj&#39;)import numpy as npimport matplotlibmatplotlib.use(&quot;Agg&quot;)import matplotlib.pyplot as pltinput_file = &#39;atoms.log&#39;data = np.loadtxt(input_file,skiprows=1)fig,(ax1,ax2) = plt.subplots(1,2,figsize=(10,6),dpi=100)ax1.plot(data[:, 0], data[:, 1],          label=&#39;t-Energy&#39;,          linewidth=2,          # 更粗的线条         color=&#39;#2ecc71&#39;,      # 柔和的绿色         alpha=0.8)            # 轻微的透明度ax1.set_xlabel(&#39;t (ps)&#39;)ax1.set_ylabel(&#39;Energy (eV)&#39;)ax1.set_title(&#39;t-Energy&#39;)ax1.legend()ax1.grid(True)ax2.plot(data[:, 0], data[:, 4],          label=&#39;t-Temperature&#39;,          linewidth=2,          color=&#39;#e74c3c&#39;,      # 柔和的红色         alpha=0.8)ax2.set_xlabel(&#39;t (ps)&#39;)ax2.set_ylabel(&#39;Temperature (K)&#39;)ax2.set_title(&#39;t-Energy&#39;)ax2.legend()ax2.grid(True)fig.tight_layout()plot_file = &#39;t-E-T.png&#39;fig.savefig(plot_file, dpi=300, bbox_inches=&#39;tight&#39;, facecolor=&#39;white&#39;)#vaspkit处理import subprocessdef run_vaspkit(task_id, selectype, element, skip_steps, frame_interval):    # 构造VASPKIT命令    command = f&quot;(echo &#123;task_id&#125;;echo &#123;selectype&#125;;echo &#123;element&#125;;echo &#123;skip_steps&#125;;echo &#123;frame_interval&#125;)| vaspkit&quot;    # 执行命令    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)    stdout, stderr = process.communicate()    # 输出结果    if process.returncode == 0:        print(&quot;VASPKIT执行成功！&quot;)        print(stdout.decode())    else:        print(&quot;VASPKIT执行失败！&quot;)        print(stderr.decode())# 示例调用task_id = 722selectype = 1element = &quot;Na&quot;skip_steps = 5000frame_interval = 1run_vaspkit(task_id, selectype, element, skip_steps, frame_interval)if os.path.exists(&#39;MSD.dat&#39;):    os.remove(&#39;XDATCAR&#39;)</code></pre><h2 id="5-mattersim使用Nose-Hoover"><a href="#5-mattersim使用Nose-Hoover" class="headerlink" title="5. mattersim使用Nose-Hoover"></a>5. mattersim使用Nose-Hoover</h2><pre><code class="python">from ase.io import read, writefrom ase.optimize import BFGSfrom ase.md.nose_hoover_chain import NoseHooverChainNVTfrom ase import unitsimport numpy as npimport osfrom ase.md.velocitydistribution import (     MaxwellBoltzmannDistribution,    Stationary,)from mattersim.forcefield import MatterSimCalculatorcalc = MatterSimCalculator(load_path=&quot;MatterSim-v1.0.0-1M.pth&quot;, device=&#39;cuda:0&#39;)atoms = read(&quot;POSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcdyn = BFGS(atoms)dyn.run(fmax=0.01)write(&quot;optimized_structure.vasp&quot;, atoms) temperature = 600timestep = 2.0 * units.fstdamp = 100trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;  loginterval = 1append_trajectory = FalseMaxwellBoltzmannDistribution(atoms,temperature_K=temperature,force_temp = True)Stationary(atoms)md1 = NoseHooverChainNVT(atoms=atoms,timestep=timestep,temperature_K = temperature,tdamp=tdamp,trajectory = None,logfile=&#39;equili.log&#39;,loginterval= loginterval,append_trajectory=append_trajectory)md1.run(5000)md2= NoseHooverChainNVT(atoms=atoms,timestep=timestep,temperature_K = temperature,tdamp=tdamp,trajectory = trajectory,logfile=logfile,loginterval= loginterval,append_trajectory=append_trajectory)md2.run(5000)#将轨迹写入XDATCARatoms_xda = read(&#39;atoms.traj&#39;, index=&#39;:&#39;)write(&#39;XDATCAR&#39;, atoms_xda)os.remove(&#39;atoms.traj&#39;)import numpy as npimport matplotlibmatplotlib.use(&quot;Agg&quot;)import matplotlib.pyplot as pltinput_file = &#39;atoms.log&#39;data = np.loadtxt(input_file,skiprows=1)fig,(ax1,ax2) = plt.subplots(1,2,figsize=(10,6),dpi=100)ax1.plot(data[:, 0], data[:, 1],          label=&#39;t-Energy&#39;,          linewidth=2,          # 更粗的线条         color=&#39;#2ecc71&#39;,      # 柔和的绿色         alpha=0.8)            # 轻微的透明度ax1.set_xlabel(&#39;t (ps)&#39;)ax1.set_ylabel(&#39;Energy (eV)&#39;)ax1.set_title(&#39;t-Energy&#39;)ax1.legend()ax1.grid(True)ax2.plot(data[:, 0], data[:, 4],          label=&#39;t-Temperature&#39;,          linewidth=2,          color=&#39;#e74c3c&#39;,      # 柔和的红色         alpha=0.8)ax2.set_xlabel(&#39;t (ps)&#39;)ax2.set_ylabel(&#39;Temperature (K)&#39;)ax2.set_title(&#39;t-Energy&#39;)ax2.legend()ax2.grid(True)fig.tight_layout()plot_file = &#39;t-E-T.png&#39;fig.savefig(plot_file, dpi=300, bbox_inches=&#39;tight&#39;, facecolor=&#39;white&#39;)#vaspkit处理import subprocessdef run_vaspkit(task_id, selectype, element, skip_steps, frame_interval):    # 构造VASPKIT命令    command = f&quot;(echo &#123;task_id&#125;;echo &#123;selectype&#125;;echo &#123;element&#125;;echo &#123;skip_steps&#125;;echo &#123;frame_interval&#125;)| vaspkit&quot;    # 执行命令    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)    stdout, stderr = process.communicate()    # 输出结果    if process.returncode == 0:        print(&quot;VASPKIT执行成功！&quot;)        print(stdout.decode())    else:        print(&quot;VASPKIT执行失败！&quot;)        print(stderr.decode())# 示例调用task_id = 722selectype = 1element = &quot;Na&quot;skip_steps = 5000frame_interval = 1run_vaspkit(task_id, selectype, element, skip_steps, frame_interval)if os.path.exists(&#39;MSD.dat&#39;):    os.remove(&#39;XDATCAR&#39;)</code></pre><h2 id="6-计算MSD-处理equili-log-atoms-log"><a href="#6-计算MSD-处理equili-log-atoms-log" class="headerlink" title="6. 计算MSD 处理equili.log &amp; atoms.log"></a>6. 计算MSD 处理equili.log &amp; atoms.log</h2><pre><code class="python">import matplotlib.pyplot as pltimport matplotlibimport numpy as npimport os from matplotlib import cmfrom scipy.stats import linregressmatplotlib.use(&#39;Agg&#39;)def ET(input_file, ax1,ax2):    data = np.loadtxt(input_file,skiprows=1)    ax1.plot(data[:, 0], data[:, 1],             label=&#39;t-Energy&#39;,             linewidth=2,          # 更粗的线条            color=&#39;#2ecc71&#39;,      # 柔和的绿色            alpha=0.8)            # 轻微的透明度    ax1.set_xlabel(&#39;t (ps)&#39;)    ax1.set_ylabel(&#39;Energy (eV)&#39;)    ax1.set_title(&#39;t-Energy&#39;)    ax1.legend()    ax1.grid(True)    ax2.plot(data[:, 0], data[:, 4],             label=&#39;t-Temperature&#39;,             linewidth=2,             color=&#39;#e74c3c&#39;,      # 柔和的红色            alpha=0.8)    ax2.set_xlabel(&#39;t (ps)&#39;)    ax2.set_ylabel(&#39;Temperature (K)&#39;)    ax2.legend()    ax2.grid(True)def plottem(tem):    data1 = np.loadtxt(os.path.join(base_folder, str(tem), &#39;MSD.dat&#39;))    data10 = data1[:, [0,4]]    x = data10[:, 0] / 1000   # Convert time to ps and scale by 2 (example transformation)    y_data = data10[:, 1]    return x, y_datadef MSD_T(ax5):    colors = cm.tab10    # Plot data for each temperature    for tem in tem_list:        x, y_data = plottem(tem)        n = x.shape[0]        start_idx = int(n*0.05)        end_idx = int(n*0.95)        time = x[start_idx:end_idx]        MSD = y_data[start_idx:end_idx]        slope, intercept, r_value, _, _ = linregress(time, MSD)        MSD_fit = slope * time + intercept        color = colors.colors[int(tem /100)-4]        ax5.plot(x, y_data,color=color, label=f&#39;&#123;tem&#125; K&#39;,linewidth=2)        ax5.plot(time, MSD_fit, color=&#39;red&#39;)        ax5.set_xlabel(&#39;Time (ps)&#39;,fontsize=20, fontweight=&#39;bold&#39;)        ax5.set_ylabel(r&#39;MSD ($\mathrm&#123;\AA&#125;^2$)&#39;,fontsize=20,fontweight=&#39;bold&#39;)        ax5.legend(prop=&#123;&#39;weight&#39;:&#39;bold&#39;,&#39;size&#39;:16&#125;)def dealMSD(inputfile):    data = np.loadtxt(inputfile,skiprows = 1 )    data[:,0] = data[:,0] / 1000     n = data.shape[0]    start_idx = int(n*0.05)    end_idx = int(n*0.95)    time = data[start_idx:end_idx,0]    MSD = data[start_idx:end_idx,4]    slope, intercept, r_value, _, _ = linregress(time, MSD)    MSD_fit = slope * time + intercept    return slopedef arrniums(ax6):    diffD = []    for i in tem_list:        inputfile = os.path.join(base_folder,str(i),&#39;MSD.dat&#39;)        try:            slope = dealMSD(inputfile)            diffuD = slope / 60000            diffD.append(diffuD)        except FileNotFoundError:            print(f&quot;文件 &#123;inputfile&#125; 不存在&quot;)            diffD.append(0)    logdiffD = np.log10(diffD)    temp_inv = np.array([1000 / i for i in tem_list])     slope_D, intercept_D, _, _, _ = linregress(temp_inv, logdiffD)    temp_inv_fit = np.linspace(0.7, 3.3, 100)    logDfit = slope_D * temp_inv_fit + intercept_D    #logDfit = slope_D * temp_inv + intercept_D    ax6.plot(temp_inv_fit, logDfit, label=f&#39;Fit: y = &#123;slope_D:.2f&#125;x + &#123;intercept_D:.2f&#125;&#39;, color=&#39;red&#39;)    ax6.scatter(temp_inv, logdiffD,color = &#39;blue&#39;,marker = &#39;o&#39;)    ax6.set_xlabel(&#39;1000/T (1/K)&#39;)    ax6.set_ylabel(r&#39;log10(D) (Å$^2$/ps)&#39;)    ax6.set_xlim(0.6, 3.5)    ax6.set_ylim(slope_D * 3.5 + intercept_D, slope_D * 0.9 + intercept_D+ 0.3)    y_min = slope_D * 3.5 + intercept_D    y_max = slope_D * 0.7 + intercept_D + 0.3    y_ticks = np.arange(np.floor(y_min / 0.5) * 0.5, np.ceil(y_max / 0.5) * 0.5, 0.5)    ax6.set_yticks(y_ticks)    ax6.legend()    ax6.grid(True)    # plt.savefig(&#39;arrnius.png&#39;,bbox_inches=&#39;tight&#39;)    from pymatgen.core import Structure    structure = Structure.from_file(&quot;POSCAR&quot;)    num_atoms = structure.num_sites    if num_atoms == 132:        volume = structure.volume        atomsnumber = 30        Eanumber = 0.198691478        T = 300        logD300 = slope_D * (1000 / T) + intercept_D        D = 10 ** logD300        sigma300 = 1.858 * atomsnumber / volume / 300 * (10**12) * D        Ea = -Eanumber * slope_D        print(Ea, sigma300)        text_str = f&#39;Ea = &#123;Ea:.2f&#125;  eV\nSigma300K = &#123;sigma300:.2f&#125; mS/cm&#39;        ax6.text(0.95, 0.95, text_str, transform=ax6.transAxes,                 fontsize=10, verticalalignment=&#39;top&#39;, horizontalalignment=&#39;right&#39;,                bbox=dict(facecolor=&#39;white&#39;, alpha=0.8, edgecolor=&#39;black&#39;))    else:        print(&#39;not the 132 atoms cell&#39;)def main():    fig = plt.figure(figsize = (12,60), dpi = 300)    gs = fig.add_gridspec(len(tem_list)* 2 + 1 ,2)    ax1= fig.add_subplot(gs[0,0])    ax2= fig.add_subplot(gs[0,1])    MSD_T(ax1)    arrniums(ax2)    for idx, tem in enumerate(tem_list):        row = idx*2 + 1         equili_folder = os.path.join(base_folder,str(tem),&#39;equili.log&#39;)        atoms_folder = os.path.join(base_folder,str(tem),&#39;atoms.log&#39;)        ax_equili_T = fig.add_subplot(gs[row,0])        ax_equili_E = fig.add_subplot(gs[row,1])        ax_atoms_T = fig.add_subplot(gs[row+1,0])         ax_atoms_E = fig.add_subplot(gs[row+1,1])        ET(equili_folder,ax_equili_T,ax_equili_E)        ET(atoms_folder,ax_atoms_T,ax_atoms_E)        ax_equili_T.set_title(f&#39;&#123;tem&#125; K&#39;)    plt.tight_layout()    plt.savefig(&#39;msd-TE.png&#39;)base_folder = &#39;./&#39;tem_list = [600,800,1000,1200]if __name__ == &#39;__main__&#39;:    main()</code></pre><h2 id="7-处理不同次的MSD，得到所有MSD"><a href="#7-处理不同次的MSD，得到所有MSD" class="headerlink" title="7. 处理不同次的MSD，得到所有MSD"></a>7. 处理不同次的MSD，得到所有MSD</h2><pre><code class="python"># %%import numpy as npimport osimport matplotlib.pyplot as pltfrom matplotlib import cmimport matplotlib.font_manager as fmbase_folder = &#39;./&#39;def plottem(tem, msd_data_list):    data1 = np.loadtxt(os.path.join(base_folder, str(tem), str(1), &#39;msd.dat&#39;))    data10 = data1[:, 0]    msd_data_list.append(data10)    for i in range(1, 4, 1):        target_path = os.path.join(base_folder, str(tem), str(i), &#39;msd.dat&#39;)        # print(target_path)        data = np.loadtxt(target_path, skiprows=1)        data_all = data[:, 4]        data_all = data_all *132 / 30        msd_data_list.append(data_all)        # Padding to match the maximum length of data    max_len = max(len(arr) for arr in msd_data_list)    padded_data = np.array([np.pad(arr, (0, max_len - len(arr)), &#39;constant&#39;, constant_values=np.nan) for arr in msd_data_list])        msd_data = padded_data.T    x = msd_data[:, 0] / 1000 * 2  # Convert time to ps and scale by 2 (example transformation)    y_data = msd_data[:, 1:]    return x, y_dataplt.rcParams[&#39;font.family&#39;] = &#39;Times New Roman&#39;plt.rcParams[&#39;font.size&#39;] = 16plt.rcParams[&#39;axes.linewidth&#39;] = 2plt.rcParams[&#39;axes.titlesize&#39;] = 16plt.rcParams[&#39;axes.labelsize&#39;] = 20plt.rcParams[&#39;axes.labelweight&#39;] = &#39;bold&#39;plt.rcParams[&#39;xtick.labelsize&#39;] = 16plt.rcParams[&#39;ytick.labelsize&#39;] = 16plt.rcParams[&#39;legend.fontsize&#39;] = 16# Create the plotplt.figure(figsize=(8, 6),dpi=300)colors = cm.tab10# Plot data for each temperaturefor tem in [600, 700, 800, 900, 1000]:    msd_data_list = []    x, y_data = plottem(tem, msd_data_list)    y_min = np.nanmin(y_data, axis=1)    y_max = np.nanmax(y_data, axis=1)    color = colors.colors[int(tem /100)-5]    # Plot the curves for the current temperature    for i in range(y_data.shape[1]):        plt.plot(x, y_data[:, i],color=color, label=f&#39;&#123;tem&#125; K&#39; if i==0 else &quot;&quot;)        # Fill between the min and max values    plt.fill_between(x, y_min, y_max, color=color, alpha=0.3)# Final plot settingsplt.xlabel(&#39;Time (ps)&#39;)plt.ylabel(r&#39;MSD ($\mathrm&#123;\AA&#125;^2$)&#39;)plt.xticks(fontweight = &#39;bold&#39;)plt.yticks(fontweight = &#39;bold&#39;)plt.legend(prop = &#123;&#39;weight&#39; :&#39;bold&#39;&#125;)plt.tight_layout()# plt.show()plt.savefig(&#39;888.png&#39;,dpi=600)</code></pre><h2 id="8-计算不同次分子动力学平均后的电导率"><a href="#8-计算不同次分子动力学平均后的电导率" class="headerlink" title="8.计算不同次分子动力学平均后的电导率"></a>8.计算不同次分子动力学平均后的电导率</h2><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltfrom scipy.stats import linregressdef dealMSD(inputfile):    data = np.loadtxt(inputfile,skiprows = 1 )    data[:,0] = data[:,0] / 1000 * 2    n = data.shape[0]    start_idx = int(n*0.05)    end_idx = int(n*0.95)    time = data[start_idx:end_idx,0]    MSD = data[start_idx:end_idx,4]    slope, intercept, r_value, _, _ = linregress(time, MSD)    MSD_fit = slope * time + intercept        fig,ax1 = plt.subplots(figsize=(4,3),dpi = 600)    ax1.plot(data[:, 0], data[:, 4],             label=&#39;600 K&#39;,             linewidth=2,          # 更粗的线条            color=&#39;#2ecc71&#39;,      # 柔和的绿色            alpha=0.8)      ax1.plot(time, MSD_fit, label=f&#39;Fit: y = &#123;slope:.2f&#125;x + &#123;intercept:.2f&#125;&#39;, color=&#39;red&#39;)    ax1.set_xlabel(&#39;t (ps)&#39;)    ax1.set_ylabel(r&#39;MSD ($\AA^2$)&#39;)    ax1.legend()    ax1.grid(True)    output_filename = inputfile.replace(&#39;/&#39;,&#39;-&#39;) + &#39;.png&#39;    plt.savefig(output_filename, bbox_inches=&#39;tight&#39;)    plt.close()#    plt.show()    return slopediffD = []temp = [600, 700,800,900,1000]for i in temp:    diff_temp = []    for j in [1,2,3]:        inputfile = f&quot;&#123;i&#125;/&#123;j&#125;/msd.dat&quot;        try:            slope = dealMSD(inputfile)            diffuD = slope / 60000            diff_temp.append(diffuD)            # diffD.append(diffuD)        except FileNotFoundError:            print(f&quot;文件 &#123;inputfile&#125; 不存在&quot;)            diff_temp.append(0)    diff_temp = np.array(diff_temp)    diff_temp_value = np.average(diff_temp)    diffD.append(diff_temp_value)logdiffD = np.log10(diffD)temp_inv = np.array([1000 / i for i in temp]) slope_D, intercept_D, _, _, _ = linregress(temp_inv, logdiffD)temp_inv_fit = np.linspace(1, 3.3, 100)logDfit = slope_D * temp_inv_fit + intercept_D#logDfit = slope_D * temp_inv + intercept_Dfig,ax1 = plt.subplots(figsize=(4,3),dpi = 600)ax1.plot(temp_inv_fit, logDfit, label=f&#39;Fit: y = &#123;slope_D:.2f&#125;x + &#123;intercept_D:.2f&#125;&#39;, color=&#39;red&#39;)ax1.scatter(temp_inv, logdiffD,color = &#39;blue&#39;,marker = &#39;o&#39;)ax1.set_xlabel(&#39;1000/T (1/K)&#39;)ax1.set_ylabel(r&#39;log10(D) (Å$^2$/ps)&#39;)ax1.set_xlim(0.9, 3.5)ax1.set_ylim(slope_D * 3.5 + intercept_D, slope_D * 0.9 + intercept_D+ 0.3)y_min = slope_D * 3.5 + intercept_Dy_max = slope_D * 0.9 + intercept_D + 0.3y_ticks = np.arange(np.floor(y_min / 0.5) * 0.5, np.ceil(y_max / 0.5) * 0.5, 0.5)ax1.set_yticks(y_ticks)ax1.legend()ax1.grid(True)plt.savefig(&#39;arrnius.png&#39;,bbox_inches=&#39;tight&#39;)from pymatgen.core import Structurestructure = Structure.from_file(&quot;POSCAR&quot;)volume = structure.volumeatomsnumber = 132Eanumber = 0.198691478T = 300logD300 = slope_D * (1000 / T) + intercept_DD = 10 ** logD300sigma300 = 1.858 * atomsnumber / volume / 300 * (10**12) * DEa = -Eanumber * slope_Dprint(Ea, sigma300)</code></pre><h1 id="3-一些结果"><a href="#3-一些结果" class="headerlink" title="3. 一些结果"></a>3. 一些结果</h1><p>大模型对NaInSiO的计算</p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250121214124415.png" alt="image-20250121214124415"></p><p>大模型能够比较好的模拟出Na的离子扩散行为</p><h1 id="4-一些脚本"><a href="#4-一些脚本" class="headerlink" title="4. 一些脚本"></a>4. 一些脚本</h1><h2 id="1-把ase轨迹转换为XDATCAR的脚本"><a href="#1-把ase轨迹转换为XDATCAR的脚本" class="headerlink" title="1. 把ase轨迹转换为XDATCAR的脚本"></a>1. 把ase轨迹转换为XDATCAR的脚本</h2><p>使用ase自带的方法</p><p><code>ase convert --input-format traj --output-format vasp-xdatcar atoms.traj XDATCAR</code></p><p>python脚本</p><pre><code class="python">from ase.io import read, write# 读取原始轨迹文件atoms = read(&#39;atoms.traj&#39;, index=&#39;:&#39;)# 将轨迹写入 XDATCAR 格式write(&#39;XDATCAR&#39;, atoms)</code></pre><h2 id="2-蒸馏大模型数据变成符合acnn标准的xsf文件的脚本"><a href="#2-蒸馏大模型数据变成符合acnn标准的xsf文件的脚本" class="headerlink" title="2. 蒸馏大模型数据变成符合acnn标准的xsf文件的脚本"></a>2. 蒸馏大模型数据变成符合acnn标准的xsf文件的脚本</h2><pre><code class="python">from mattersim.applications.moldyn import MolecularDynamicsfrom ase.io import readfrom mattersim.forcefield import MatterSimCalculatorfrom mattersim.applications.relax import Relaxerimport numpy as np# 使用 MatterSimCalculator 初始化计算器calc = MatterSimCalculator(load_path=&quot;MatterSim-v1.0.0-5M.pth&quot;, device=&#39;cuda:0&#39;)# 设置优化器relaxer = Relaxer(    optimizer=&quot;BFGS&quot;,  # 优化方法，使用 FIRE 或 BFGS    filter=None,  # 是否应用过滤器    constrain_symmetry=True,  # 是否约束对称性)# 读取 POSCAR 文件atoms = read(&quot;POSCAR111.vasp&quot;, format=&#39;vasp&#39;)atoms.calc = calc# 进行结构弛豫converged, relaxed_structure = relaxer.relax_structures(atoms, optimizer=&quot;FIRE&quot;, filter=None, constrain_symmetry=True, fmax=0.05)# 设置计算器并准备进行分子动力学模拟relaxed_structure.calc = calc# 分子动力学参数ensemble = &quot;NVT_BERENDSEN&quot;temperature = 1000timestep = 1.0taut = 50trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;nvt_runner = MolecularDynamics(    atoms=relaxed_structure,    ensemble=ensemble,    temperature=temperature,    timestep=timestep,    taut=taut,    trajectory=trajectory,    loginterval=1,    logfile=logfile)# 保存每一帧为 .xsf 文件的函数def write2my(file_path, ene_i, lat_i, ele_i, coo_i, foc_i):    lat_i = lat_i.reshape(3, 3)    coo_i = coo_i.reshape(-1, 3)    foc_i = foc_i.reshape(-1, 3)    with open(file_path, &#39;w&#39;) as file:        file.write(f&quot;# total energy = &#123;ene_i&#125; eV\n\n&quot;)        file.write(&quot;CRYSTAL\n&quot;)        file.write(&quot;PRIMVEC\n&quot;)                for j in lat_i:            for k in j:                file.write(f&#39;&#123;k:20.8f&#125;&#39;)            file.write(&#39;\n&#39;)        file.write(&quot;PRIMCOORD\n&quot;)        file.write(f&quot;&#123;len(coo_i)&#125; 1\n&quot;)        for j in range(len(coo_i)):            element_name = chemical_symbols[ele_i[j]]            file.write(f&#39;&#123;element_name:2&#125; &#39;)            # 写入坐标            for k in coo_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            # 写入受力            for k in foc_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            file.write(&quot;\n&quot;)# 模拟运行并每50步保存一次 .xsf 文件for step in range(1000000):  # 你可以根据需要设置步数    nvt_runner.run(1)  # 运行一个步长    atoms = nvt_runner.atoms  # 获取当前步长的原子对象        # 每50步保存一次数据    if step % 100 == 0:        # 获取总能量        energy = atoms.get_total_energy()                # 获取晶胞矩阵        cell = atoms.get_cell()                # 获取原子元素类型        atomic_numbers = atoms.get_atomic_numbers()                # 获取原子坐标        positions = atoms.get_positions()                # 获取原子受力        forces = atoms.get_forces()                # 保存当前帧数据为 .xsf 文件        frame_filename = f&quot;frame_&#123;step&#125;.xsf&quot;        write2my(frame_filename, energy, cell, atomic_numbers, positions, forces)</code></pre><h2 id="3-扩胞脚本"><a href="#3-扩胞脚本" class="headerlink" title="3. 扩胞脚本"></a>3. 扩胞脚本</h2><pre><code class="python">from pymatgen.io.vasp import Poscar# 读取 POSCAR 文件poscar = Poscar.from_file(&quot;POSCAR&quot;)# 扩胞为 2x2x3supercell = poscar.structure * [6, 6, 6]# 将扩胞后的结构写入新的 POSCAR 文件poscar = Poscar(supercell)poscar.write_file(&quot;POSCAR666.vasp&quot;)</code></pre><pre><code class="python">from ase.io import read,writefrom ase.build import make_supercellatoms = read(&quot;POSCAR&quot;)P = [[3, 0, 0],     [0, 3, 0],     [0, 0, 3]]supercell = make_supercell(atoms,P)supercell.write(&quot;POSCAR333&quot;)</code></pre><h2 id="4-计算体积脚本"><a href="#4-计算体积脚本" class="headerlink" title="4. 计算体积脚本"></a>4. 计算体积脚本</h2><pre><code class="python">from pymatgen.core import Structure# 读取POSCAR文件#structure = Structure.from_file(&quot;POSCAR.vasp&quot;)structure = Structure.from_file(&quot;POSCAR.vasp&quot;)# 计算体积volume = structure.volume# 输出体积print(f&quot;&#123;volume&#125; Å³&quot;)</code></pre><h2 id="5-元素替换脚本"><a href="#5-元素替换脚本" class="headerlink" title="5. 元素替换脚本"></a>5. 元素替换脚本</h2><pre><code class="python">import osimport shutil# 创建文件夹base_path = &quot;./&quot;  # 替换为你的根目录路径element_symbols = [&quot;La&quot;, &quot;Ce&quot;,&quot;Pr&quot;,&quot;Nd&quot;,&quot;Pm&quot;,&quot;Eu&quot;,&quot;Sm&quot;,&quot;Gd&quot;,&quot;Tb&quot;,&quot;Dy&quot;,&quot;Ho&quot;,&quot;Er&quot;,&quot;Tm&quot;,&quot;Sc&quot;,&quot;Ti&quot;,&quot;V&quot;,&quot;Nb&quot;,&quot;Ta&quot;,&quot;Cr&quot;,&quot;Mo&quot;,&quot;Mn&quot;,&quot;Fe&quot;,&quot;Ru&quot;,&quot;Co&quot;,&quot;Rh&quot;,&quot;Ir&quot;,&quot;Ni&quot;,&quot;Pd&quot;,&quot;Cu&quot;,&quot;B&quot;,&quot;Al&quot;,&quot;Ga&quot;,&quot;In&quot;,&quot;N&quot;,&quot;P&quot;,&quot;Sb&quot;,&quot;Bi&quot;]for idx, element in enumerate(element_symbols, start=1):    folder_name = f&quot;&#123;idx&#125;-&#123;element&#125;&quot;    folder_path = os.path.join(base_path, folder_name)        if not os.path.exists(folder_path):        os.makedirs(folder_path)# 读取原始 POSCAR 文件input_file = &quot;./POSCAR&quot;  # 替换为你的 POSCAR 文件路径with open(input_file, &quot;r&quot;) as file:    lines = file.readlines()# 逐个元素进行替换并创建文件夹for idx, element in enumerate(element_symbols, start=1):    folder_name = f&quot;&#123;idx&#125;-&#123;element&#125;&quot;    folder_path = os.path.join(base_path, folder_name)        modified_lines = [line.replace(&quot;Y&quot;, element) for line in lines]        # 写入修改后的内容到对应的文件夹    output_file = os.path.join(folder_path, &quot;POSCAR&quot;)    with open(output_file, &quot;w&quot;) as file:        file.writelines(modified_lines)        # 复制同名的 INCAR 文件到对应的文件夹    incar_source = &quot;./INCAR&quot;  # 替换为你的 INCAR 文件路径    incar_destination = os.path.join(folder_path, &quot;INCAR&quot;)    shutil.copy(incar_source, incar_destination)    lsf_source = &quot;./vasp.pbs&quot;  # 替换为你的 INCAR 文件路径    lsf_destination = os.path.join(folder_path, &quot;opt.lsf&quot;)    shutil.copy(lsf_source, lsf_destination)print(&quot;Replacement and file writing complete.&quot;)</code></pre><h1 id="5-使用m3gnet"><a href="#5-使用m3gnet" class="headerlink" title="5. 使用m3gnet"></a>5. 使用m3gnet</h1><pre><code class="python"># import warnings# from m3gnet.models import Relaxer# from pymatgen.core import Lattice, Structure# from ase.io import read, write# import tensorflow as tf# from ase.optimize import BFGS# for category in (UserWarning, DeprecationWarning):#     warnings.filterwarnings(&quot;ignore&quot;, category=category, module=&quot;tensorflow&quot;)# gpus = tf.config.list_physical_devices(&#39;GPU&#39;)# if len(gpus) &gt; 0:#     tf.config.set_visible_devices(gpus[0], &#39;GPU&#39;) # atoms = read(&quot;POSCAR222.vasp&quot;,format=&#39;vasp&#39;)#  # 只使用第一块 GPU# relaxer = Relaxer(optimizer = &quot;BFGS&quot;)  # This loads the default pre-trained model# relax_results = relaxer.relax(atoms,verbose=True)# final_structure = relax_results[&#39;final_structure&#39;]# final_energy_per_atom = float(relax_results[&#39;trajectory&#39;].energies[-1] / len(atoms))# print(f&quot;Relaxed lattice parameter is &#123;final_structure.lattice.abc[0]:.3f&#125; Å&quot;)# print(f&quot;Final energy is &#123;final_energy_per_atom:.3f&#125; eV/atom&quot;)from ase.optimize import BFGSfrom m3gnet.models import Relaxer,M3GNetCalculatorfrom ase.io import read, writeimport tensorflow as tfgpus = tf.config.list_physical_devices(&#39;GPU&#39;)if len(gpus) &gt; 0:    tf.config.set_visible_devices(gpus[0], &#39;GPU&#39;) relaxer = Relaxer()calculator = relaxer.calculatoratoms = read(&quot;POSCAR222.vasp&quot;,format=&#39;vasp&#39;)# print(f&quot;unrelaxed lattice parameter is &#123;atoms.lattice.abc[0]:.3f&#125; Å&quot;)atoms.calc = calculatoroptimizer = BFGS(atoms)optimizer.run(fmax=0.01) # print(f&quot;Relaxed lattice parameter is &#123;atoms.lattice.abc[0]:.3f&#125; Å&quot;)</code></pre><h1 id="6-ASE结合phonopy-使用大模型作为计算器"><a href="#6-ASE结合phonopy-使用大模型作为计算器" class="headerlink" title="6. ASE结合phonopy 使用大模型作为计算器"></a>6. ASE结合phonopy 使用大模型作为计算器</h1><h2 id="1-关于声子谱"><a href="#1-关于声子谱" class="headerlink" title="1.关于声子谱"></a>1.关于声子谱</h2><pre><code>有限位移法（Finite Displacement Method）是一种用于计算晶体声子谱的数值方法，其基本原理是通过对晶体结构中的原子进行微小的位移，计算相应的力，从而构建力常数矩阵，进而求解声子频率和振动模式。具体步骤如下：结构优化：首先，对晶体结构进行高精度的优化，以获得平衡的原子位置和晶格常数。在优化过程中，需要设置适当的收敛标准，如能量收敛（EDIFF）和力收敛（EDIFFG）等，以确保结构的准确性。构建超胞：在优化后的结构基础上，使用Phonopy等工具构建超胞。超胞的尺寸通常是原胞的整数倍，具体尺寸取决于所需的声子计算精度和计算资源。原子位移：对超胞中的每个原子进行微小的位移，通常在0.01到0.03埃之间。这些位移可以是沿着晶体轴的正负方向，或者在不同方向上进行。力计算：在每个位移结构上，进行单点能量计算，获取每个原子所受的力。这些力数据用于构建力常数矩阵。构建力常数矩阵：利用获得的力数据，构建力常数矩阵。该矩阵描述了原子间的相互作用，是计算声子谱的基础。声子谱计算：通过对力常数矩阵进行对角化，得到声子的频率和振动模式。进一步，可以绘制声子色散曲线，分析声子的行为。注意事项：有限位移法的计算精度高度依赖于力的计算精度，因此在结构优化和单点计算中需要设置严格的收敛标准。位移幅度的选择需要平衡计算精度和计算量，过大的位移可能导致力常数矩阵的非线性，过小的位移可能导致数值误差。计算过程中，可能需要考虑晶体的对称性，以减少计算量。通过上述步骤，有限位移法能够有效地计算晶体的声子谱，为研究材料的热力学性质、动力学稳定性等提供重要信息。</code></pre><h2 id="2-绘制投影声子态密度"><a href="#2-绘制投影声子态密度" class="headerlink" title="2. 绘制投影声子态密度"></a>2. 绘制投影声子态密度</h2><pre><code class="python">import numpy as npimport matplotlibmatplotlib.use(&#39;Agg&#39;)import matplotlib.pyplot as plt# 读取文件input_file1 = &#39;projected_dos.dat&#39;  # 输入文件名input_file2 = &#39;total_dos.dat&#39;output_file = &#39;tdosandpdos.dat&#39;  # 输出文件名# 读取数据data = np.loadtxt(input_file1)data2 = np.loadtxt(input_file2)# 处理数据# 第一列保持不变col0 = data2[:,1]col1 = data[:, 0]# 第2-31列求和放到第二列col2 = np.sum(data[:, 1:31], axis=1)# 第32-37列求和放到第三列col3 = np.sum(data[:, 31:37], axis=1)# 第38-61列求和放到第四列col4 = np.sum(data[:, 37:61], axis=1)# 第62-133列求和放到第五列col5 = np.sum(data[:, 61:133], axis=1)# 将处理后的数据保存到新文件processed_data = np.column_stack((col1, col2, col3, col4, col5,col0))np.savetxt(output_file, processed_data, fmt=&#39;%.6f&#39;, delimiter=&#39;\t&#39;)plt.figure(figsize=(10, 6), dpi=100)  # 增加 dpi 以提高分辨率# 绘制图形，增强样式plt.plot(processed_data[:, 0], processed_data[:, 1],          label=&#39;PDOS_Na&#39;,          linewidth=2,          # 更粗的线条         color=&#39;#2ecc71&#39;,      # 柔和的绿色         alpha=0.8)           # 轻微的透明度plt.plot(processed_data[:, 0], processed_data[:, 2],          label=&#39;PDOS_X&#39;,          linewidth=2,          color=&#39;#e74c3c&#39;,      # 柔和的红色         alpha=0.8)plt.plot(processed_data[:, 0], processed_data[:, 3],          label=&#39;PDOS_Si&#39;,          linewidth=2,          color=&#39;#3498db&#39;,      # 柔和的蓝色         alpha=0.8)plt.plot(processed_data[:, 0], processed_data[:, 4],          label=&#39;PDOS_O&#39;,          linewidth=2,          color=&#39;#9b59b6&#39;,      # 紫色         alpha=0.8)plt.plot(processed_data[:, 0], processed_data[:, 5],          label=&#39;TDOS&#39;,          linewidth=2.5,        # TDOS 线条稍粗         color=&#39;#34495e&#39;,      # 深灰色         alpha=0.9)# 自定义坐标轴plt.xlabel(&#39;ω (THz)&#39;, fontsize=12, labelpad=10)  # 使用希腊字母 ω 表示频率plt.ylabel(&#39;Number&#39;, fontsize=12, labelpad=10)plt.title(&#39;Partial and Total Density of States&#39;,           fontsize=14,           pad=15,           fontweight=&#39;bold&#39;)# 增强图例plt.legend(    fontsize=10,    frameon=True,           # 添加边框    framealpha=0.9,         # 轻微透明的边框    edgecolor=&#39;gray&#39;,       # 边框颜色    loc=&#39;best&#39;              # 自动选择最佳位置)# 自定义网格（可选 - 浅色网格）plt.grid(True, linestyle=&#39;--&#39;, alpha=0.3, color=&#39;gray&#39;)# 调整边框（坐标轴边框）ax = plt.gca()ax.spines[&#39;top&#39;].set_color(&#39;gray&#39;)ax.spines[&#39;right&#39;].set_color(&#39;gray&#39;)ax.spines[&#39;left&#39;].set_color(&#39;gray&#39;)ax.spines[&#39;bottom&#39;].set_color(&#39;gray&#39;)ax.spines[&#39;top&#39;].set_alpha(0.5)ax.spines[&#39;right&#39;].set_alpha(0.5)# 添加次要刻度plt.minorticks_on()# 调整刻度参数plt.tick_params(axis=&#39;both&#39;, which=&#39;major&#39;, labelsize=10)plt.tick_params(axis=&#39;both&#39;, which=&#39;minor&#39;, length=2)# 紧凑布局，防止标签被截断plt.tight_layout()# 保存高质量图像plot_file = &#39;DOS.png&#39;plt.savefig(plot_file, dpi=300, bbox_inches=&#39;tight&#39;, facecolor=&#39;white&#39;)</code></pre><h1 id="7-ASE-grace"><a href="#7-ASE-grace" class="headerlink" title="7. ASE+grace"></a>7. ASE+grace</h1><h2 id="1-BFGS优化-NVTBerendsen分子动力学"><a href="#1-BFGS优化-NVTBerendsen分子动力学" class="headerlink" title="1. BFGS优化+NVTBerendsen分子动力学"></a>1. BFGS优化+NVTBerendsen分子动力学</h2><p>NVTBerendsen在taut比较小时可能得不到正确的动力学结果 ，因此模拟还是要用nose Hoover</p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320144100597.png" alt="image-20250320144100597"></p><pre><code class="python">from ase.io import read, writefrom ase.optimize import BFGSfrom ase.md.nvtberendsen import NVTBerendsenfrom ase import unitsfrom tensorpotential.calculator import grace_fmimport numpy as npimport osfrom ase.md.velocitydistribution import (     MaxwellBoltzmannDistribution,    Stationary,)calc = grace_fm(&#39;GRACE-2L-OMAT&#39;)atoms = read(&quot;POSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcdyn = BFGS(atoms)dyn.run(fmax=0.01) temperature = 600timestep = 2.0 * units.fstaut = 100trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;  loginterval = 1append_trajectory = FalseMaxwellBoltzmannDistribution(atoms,temperature_K=temperature,force_temp = True)Stationary(atoms)md = NVTBerendsen(atoms=atoms,timestep=timestep,temperature_K = temperature,taut=taut,trajectory = trajectory,logfile=logfile,loginterval= loginterval,append_trajectory=append_trajectory)md.run(250000)#后处理#将轨迹写入XDATCARatoms_xda = read(&#39;atoms.traj&#39;, index=&#39;:&#39;)write(&#39;XDATCAR&#39;, atoms_xda)os.remove(&#39;atoms.traj&#39;)import numpy as npimport matplotlibmatplotlib.use(&quot;Agg&quot;)import matplotlib.pyplot as pltinput_file = &#39;atoms.log&#39;data = np.loadtxt(input_file,skiprows=1)fig,(ax1,ax2) = plt.subplots(1,2,figsize=(10,6),dpi=100)ax1.plot(data[:, 0], data[:, 1],          label=&#39;t-Energy&#39;,          linewidth=2,          # 更粗的线条         color=&#39;#2ecc71&#39;,      # 柔和的绿色         alpha=0.8)            # 轻微的透明度ax1.set_xlabel(&#39;t (ps)&#39;)ax1.set_ylabel(&#39;Energy (eV)&#39;)ax1.set_title(&#39;t-Energy&#39;)ax1.legend()ax1.grid(True)ax2.plot(data[:, 0], data[:, 4],          label=&#39;t-Temperature&#39;,          linewidth=2,          color=&#39;#e74c3c&#39;,      # 柔和的红色         alpha=0.8)ax2.set_xlabel(&#39;t (ps)&#39;)ax2.set_ylabel(&#39;Temperature (K)&#39;)ax2.set_title(&#39;t-Energy&#39;)ax2.legend()ax2.grid(True)fig.tight_layout()plot_file = &#39;t-E-T.png&#39;fig.savefig(plot_file, dpi=300, bbox_inches=&#39;tight&#39;, facecolor=&#39;white&#39;)#vaspkit处理import subprocessdef run_vaspkit(task_id, selectype, element, skip_steps, frame_interval):    # 构造VASPKIT命令    command = f&quot;(echo &#123;task_id&#125;;echo &#123;selectype&#125;;echo &#123;element&#125;;echo &#123;skip_steps&#125;;echo &#123;frame_interval&#125;)| vaspkit&quot;    # 执行命令    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)    stdout, stderr = process.communicate()    # 输出结果    if process.returncode == 0:        print(&quot;VASPKIT执行成功！&quot;)        print(stdout.decode())    else:        print(&quot;VASPKIT执行失败！&quot;)        print(stderr.decode())# 示例调用task_id = 722selectype = 1element = &quot;Na&quot;skip_steps = 5000frame_interval = 1run_vaspkit(task_id, selectype, element, skip_steps, frame_interval)if os.path.exists(&#39;MSD.dat&#39;):    os.remove(&#39;XDATCAR&#39;)</code></pre><h2 id="2-使用ASE中的Nose-Hoover-NVT"><a href="#2-使用ASE中的Nose-Hoover-NVT" class="headerlink" title="2. 使用ASE中的Nose-Hoover NVT"></a>2. 使用ASE中的Nose-Hoover NVT</h2><pre><code class="python">from ase.io import read, writefrom ase.optimize import BFGSfrom ase.md.nose_hoover_chain import NoseHooverChainNVTfrom ase import unitsfrom tensorpotential.calculator import grace_fmimport numpy as npimport osfrom ase.md.velocitydistribution import (     MaxwellBoltzmannDistribution,    Stationary,)calc = grace_fm(&#39;GRACE-2L-OMAT&#39;)atoms = read(&quot;POSCAR&quot;,format=&#39;vasp&#39;)atoms.calc = calcdyn = BFGS(atoms)dyn.run(fmax=0.01)write(&quot;optimized_structure.vasp&quot;, atoms) temperature = 600timestep = 2.0 * units.fstdamp = 100trajectory = &quot;atoms.traj&quot;logfile = &quot;atoms.log&quot;  loginterval = 1append_trajectory = FalseMaxwellBoltzmannDistribution(atoms,temperature_K=temperature,force_temp = True)Stationary(atoms)md1 = NoseHooverChainNVT(atoms=atoms,timestep=timestep,temperature_K = temperature,tdamp=tdamp,trajectory = None,logfile=&#39;equili.log&#39;,loginterval= loginterval,append_trajectory=append_trajectory)md1.run(10000)md2= NoseHooverChainNVT(atoms=atoms,timestep=timestep,temperature_K = temperature,tdamp=tdamp,trajectory = trajectory,logfile=logfile,loginterval= loginterval,append_trajectory=append_trajectory)md2.run(250000)</code></pre><h1 id="8-Nose-Hoover和Berendsen的对比"><a href="#8-Nose-Hoover和Berendsen的对比" class="headerlink" title="8. Nose-Hoover和Berendsen的对比"></a>8. Nose-Hoover和Berendsen的对比</h1><blockquote><p>更大的晶胞也需要更长的弛豫时间</p></blockquote><ul><li><p>Nose-Hoover  tdamp&#x3D; 200 vs Berendsen taut&#x3D;100</p><p>Nose-Hoover和Berendsen的动力学过程不同</p><p>Nose-Hoover</p><p><img src="/./../../%E5%9B%BE%E7%89%87/t-E-T-1742462430030-9.png" alt="t-E-T"></p></li></ul><p>Berendsen</p><p><img src="/./../../%E5%9B%BE%E7%89%87/t-E-T.png" alt="t-E-T"></p><ul><li><p>Nose-Hoover tdamp &#x3D; 40 100 200 400 对比</p><p>40 </p><p><img src="/./../../%E5%9B%BE%E7%89%87/t-E-T-1742462498650-11.png" alt="t-E-T"></p></li></ul><p>​     100</p><p>   <img src="/./../../%E5%9B%BE%E7%89%87/t-E-T-1742462527710-13.png" alt="t-E-T"></p><p>200</p><p><img src="/./../../%E5%9B%BE%E7%89%87/t-E-T-1742462552301-15.png" alt="t-E-T"></p><p>400</p><p><img src="/./../../%E5%9B%BE%E7%89%87/t-E-T-1742462576244-17.png" alt="t-E-T"></p><p>from deepseek</p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320172836556.png" alt="image-20250320172836556"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320172853036.png" alt="image-20250320172853036"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320172925841.png" alt="image-20250320172925841"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320172947930.png" alt="image-20250320172947930"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20250320173043216.png" alt="image-20250320173043216"></p><h1 id="9-学习mattersim的phonon的方法"><a href="#9-学习mattersim的phonon的方法" class="headerlink" title="9. 学习mattersim的phonon的方法"></a>9. 学习mattersim的phonon的方法</h1><h2 id="1-包装ase的结构为phonon的格式"><a href="#1-包装ase的结构为phonon的格式" class="headerlink" title="1. 包装ase的结构为phonon的格式"></a>1. 包装ase的结构为phonon的格式</h2><p><a href="https://github.com/microsoft/mattersim/blob/main/src/mattersim/utils/phonon_utils.py">https://github.com/microsoft/mattersim/blob/main/src/mattersim/utils/phonon_utils.py</a></p><pre><code class="python">def to_phonopy_atoms(atoms: Atoms):    &quot;&quot;&quot;    Transform ASE atoms object to Phonopy object    Args:        atoms (Atoms): ASE atoms object to provide lattice informations.    &quot;&quot;&quot;    phonopy_atoms = PhonopyAtoms(        symbols=atoms.get_chemical_symbols(),        cell=atoms.get_cell(),        masses=atoms.get_masses(),        positions=atoms.get_positions(),    )    return phonopy_atomsdef to_ase_atoms(phonopy_atoms):    &quot;&quot;&quot;    Transform Phonopy object to ASE atoms object    Args:        phonopy_atoms (Phonopy): Phonopy object to provide lattice informations.    &quot;&quot;&quot;    atoms = Atoms(        symbols=phonopy_atoms.symbols,        cell=phonopy_atoms.cell,        masses=phonopy_atoms.masses,        positions=phonopy_atoms.positions,        pbc=True,    )    return atoms</code></pre><h2 id="2-修改mattersim以输出投影声子密度，并且指定固定的路径内的q点个数来匹配自己写的绘制声子谱的脚本（vasp模拟部分）（auto-band得到的q点个数在不同路径上不是固定的）"><a href="#2-修改mattersim以输出投影声子密度，并且指定固定的路径内的q点个数来匹配自己写的绘制声子谱的脚本（vasp模拟部分）（auto-band得到的q点个数在不同路径上不是固定的）" class="headerlink" title="2. 修改mattersim以输出投影声子密度，并且指定固定的路径内的q点个数来匹配自己写的绘制声子谱的脚本（vasp模拟部分）（auto_band得到的q点个数在不同路径上不是固定的）"></a>2. 修改mattersim以输出投影声子密度，并且指定固定的路径内的q点个数来匹配自己写的绘制声子谱的脚本（vasp模拟部分）（auto_band得到的q点个数在不同路径上不是固定的）</h2><p>修改&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;mattersim&#x2F;applications&#x2F;phonon.py </p><pre><code class="python">def compute_phonon_spectrum_dos(        atoms: Atoms, phonon: Phonopy, k_point_mesh: Union[int, Iterable[int]]    ):        &quot;&quot;&quot;        Calculate phonon spectrum and DOS based on force constant matrix in        phonon object        Args:            atoms (Atoms): ASE atoms object to provide lattice information            phonon (Phonopy): Phonopy object which contains force constants matrix            k_point_mesh (Union[int, Iterable[int]]): The qpoints number in First                Brillouin Zone in three directions for DOS calculation.        &quot;&quot;&quot;        print(f&quot;Qpoints mesh for Brillouin Zone integration : &#123;k_point_mesh&#125;&quot;)        phonon.run_mesh(k_point_mesh)        print(            &quot;Dispersion relations using phonopy for &quot;            + str(atoms.symbols)            + &quot; ...&quot;            + &quot;\n&quot;        )        # plot phonon spectrum        phonon.auto_band_structure(plot=True, write_yaml=True, with_eigenvectors=True).savefig(            f&quot;&#123;str(atoms.symbols)&#125;_phonon_band.png&quot;, dpi=300        )        phonon.auto_total_dos(plot=True, write_dat=True).savefig(            f&quot;&#123;str(atoms.symbols)&#125;_phonon_dos.png&quot;, dpi=300        )        # Save additional files        phonon.save(settings=&#123;&quot;force_constants&quot;: True&#125;)</code></pre><p>主要修改了compute_force_constants 这个函数，替换为 </p><pre><code class="python"># -*- coding: utf-8 -*-import datetimeimport osfrom typing import Iterable, Unionimport numpy as npfrom ase import Atomsfrom phonopy import Phonopyfrom tqdm import tqdmfrom seekpath import get_pathfrom phonopy.phonon.band_structure import get_band_qpoints_and_path_connectionsfrom mattersim.utils.phonon_utils import (    get_primitive_cell,    to_ase_atoms,    to_phonopy_atoms,)from mattersim.utils.supercell_utils import get_supercell_parametersclass PhononWorkflow(object):    &quot;&quot;&quot;    This class is used to calculate the phonon dispersion relationship of    material using phonopy    &quot;&quot;&quot;    def __init__(        self,        atoms: Atoms,        find_prim: bool = False,        work_dir: str = None,        amplitude: float = 0.01,        supercell_matrix: np.ndarray = None,        qpoints_mesh: np.ndarray = None,        max_atoms: int = None,        calc_spec: bool = True,    ):        &quot;&quot;&quot;_summary        Args:            atoms (Atoms): ASE atoms object contains structure information and                calculator.            find_prim (bool, optional): If find the primitive cell and use it                to calculate phonon. Default to False.            work_dir (str, optional): workplace path to contain phonon result.                Defaults to data + chemical_symbols + &#39;phonon&#39;            amplitude (float, optional): Magnitude of the finite difference to                displace in force constant calculation, in Angstrom. Defaults                to 0.01 Angstrom.            supercell_matrix (nd.array, optional): Supercell matrix for constr                -uct supercell, priority over than max_atoms. Defaults to None.            qpoints_mesh (nd.array, optional): Qpoint mesh for IBZ integral,                priority over than max_atoms. Defaults to None.            max_atoms (int, optional): Maximum atoms number limitation for the                supercell generation. If not set, will automatic generate super                -cell based on symmetry. Defaults to None.            calc_spec (bool, optional): If calculate the spectrum and check                 imaginary frequencies. Default to True.        &quot;&quot;&quot;        assert (            atoms.calc is not None        ), &quot;PhononWorkflow only accepts ase atoms with an attached calculator&quot;        if find_prim:            self.atoms = get_primitive_cell(atoms)            self.atoms.calc = atoms.calc        else:            self.atoms = atoms        if work_dir is not None:            self.work_dir = work_dir        else:            current_datetime = datetime.datetime.now()            formatted_datetime = current_datetime.strftime(&quot;%Y-%m-%d-%H-%M&quot;)            self.work_dir = (                f&quot;&#123;formatted_datetime&#125;-&#123;atoms.get_chemical_formula()&#125;-phonon&quot;            )        self.amplitude = amplitude        if supercell_matrix is not None:            if supercell_matrix.shape == (3, 3):                self.supercell_matrix = supercell_matrix            elif supercell_matrix.shape == (3,):                self.supercell_matrix = np.diag(supercell_matrix)            else:                assert (                    False                ), &quot;Supercell matrix must be an array (3,1) or a matrix (3,3).&quot;        else:            self.supercell_matrix = supercell_matrix        if qpoints_mesh is not None:            assert qpoints_mesh.shape == (3,), &quot;Qpoints mesh must be an array (3,1).&quot;            self.qpoints_mesh = qpoints_mesh        else:            self.qpoints_mesh = qpoints_mesh        self.max_atoms = max_atoms        self.calc_spec = calc_spec    def compute_force_constants(self, atoms: Atoms, nrep_second: np.ndarray):        &quot;&quot;&quot;        Calculate force constants        Args:            atoms (Atoms): ASE atoms object to provide lattice informations.            nrep_second (np.ndarray): Supercell size used for 2nd force                constant calculations.        &quot;&quot;&quot;        print(f&quot;Supercell matrix for 2nd force constants : \n&#123;nrep_second&#125;&quot;)        # Generate phonopy object        phonon = Phonopy(            to_phonopy_atoms(atoms),            supercell_matrix=nrep_second,            primitive_matrix=&quot;auto&quot;,            log_level=2,        )        # Generate displacements        phonon.generate_displacements(distance=self.amplitude)        # Compute force constants        second_scs = phonon.supercells_with_displacements        second_force_sets = []        print(&quot;\n&quot;)        print(&quot;Inferring forces for displaced atoms and computing fcs ...&quot;)        for disp_second in tqdm(second_scs):            pa_second = to_ase_atoms(disp_second)            pa_second.calc = self.atoms.calc            second_force_sets.append(pa_second.get_forces())        phonon.forces = np.array(second_force_sets)        phonon.produce_force_constants()        phonon.symmetrize_force_constants()        return phonon    @staticmethod    def compute_phonon_spectrum_dos(        atoms: Atoms, phonon: Phonopy, k_point_mesh: Union[int, Iterable[int]]    ):        &quot;&quot;&quot;        Calculate phonon spectrum and DOS based on force constant matrix in        phonon object        Args:            atoms (Atoms): ASE atoms object to provide lattice information            phonon (Phonopy): Phonopy object which contains force constants matrix            k_point_mesh (Union[int, Iterable[int]]): The qpoints number in First                Brillouin Zone in three directions for DOS calculation.        &quot;&quot;&quot;        print(f&quot;Qpoints mesh for Brillouin Zone integration : &#123;k_point_mesh&#125;&quot;)        phonon.run_mesh(k_point_mesh)        print(            &quot;Dispersion relations using phonopy for &quot;            + str(atoms.symbols)            + &quot; ...&quot;            + &quot;\n&quot;        )        #phonon.auto_band_structure(plot=True, write_yaml=True, with_eigenvectors=False).savefig(           # f&quot;&#123;str(atoms.symbols)&#125;_auto_band.png&quot;, dpi=300)                 lattice = atoms.cell        scaled_positions = atoms.get_scaled_positions()        atomic_numbers = atoms.get_atomic_numbers()        path_data = get_path((lattice, scaled_positions, atomic_numbers))        point_coords = path_data[&quot;point_coords&quot;]        band_segments = path_data[&quot;path&quot;]        from phonopy.phonon.band_structure import get_band_qpoints_and_path_connections        raw_labels = []        path = []        connectionsall = []        for start_label, end_label in band_segments:            q_start = point_coords[start_label]            q_end = point_coords[end_label]            path.append([q_start,q_end])            raw_labels.append(start_label)            raw_labels.append(end_label)            connectionsall.append(&#39;False&#39;)        qpoints, connections = get_band_qpoints_and_path_connections(path, npoints=51)        def convert_labels(raw_labels):            latex_labels = []            for label in raw_labels:                if label.upper() == &quot;GAMMA&quot;:                    latex_labels.append(&quot;$\\Gamma$&quot;)                else:                    latex_labels.append(label)            return latex_labels        labels = convert_labels(raw_labels)        phonon.run_band_structure(qpoints, path_connections=connections, labels=labels)        bs = phonon.band_structure        bs.write_yaml()        plt = phonon.plot_band_structure()        plt.savefig(f&quot;&#123;str(atoms.symbols)&#125;_manual_band.png&quot;,dpi=300)        phonon.auto_total_dos(plot=True, write_dat=True).savefig(            f&quot;&#123;str(atoms.symbols)&#125;_phonon_dos.png&quot;, dpi=300        )        phonon.auto_projected_dos(plot=True,write_dat=True).savefig(            f&quot;&#123;str(atoms.symbols)&#125;_phonon_projected_dos.png&quot;, dpi=300        )        phonon.save(settings=&#123;&quot;force_constants&quot;: True&#125;)    @staticmethod    def check_imaginary_freq(phonon: Phonopy):        &quot;&quot;&quot;        Check whether phonon has imaginary frequency.        Args:            phonon (Phonopy): Phonopy object which contains phonon spectrum frequency.        &quot;&quot;&quot;        band_dict = phonon.get_band_structure_dict()        frequencies = np.concatenate(            [np.array(freq).flatten() for freq in band_dict[&quot;frequencies&quot;]], axis=None        )        has_imaginary = False        if np.all(np.array(frequencies) &gt;= -0.299):            pass        else:            print(&quot;Warning! Imaginary frequencies found!&quot;)            has_imaginary = True        return has_imaginary    def run(self):        &quot;&quot;&quot;        The entrypoint to start the workflow.        &quot;&quot;&quot;        current_path = os.path.abspath(&quot;.&quot;)        try:            # check folder exists            if not os.path.exists(self.work_dir):                os.makedirs(self.work_dir)            os.chdir(self.work_dir)            try:                # Generate supercell parameters based on optimized structures                nrep_second, k_point_mesh = get_supercell_parameters(                    self.atoms, self.supercell_matrix, self.qpoints_mesh, self.max_atoms                )            except Exception as e:                print(&quot;Error whille generating supercell parameters:&quot;, e)                raise            try:                # Calculate 2nd force constants                phonon = self.compute_force_constants(self.atoms, nrep_second)            except Exception as e:                print(&quot;Error while computing force constants:&quot;, e)                raise            if self.calc_spec:                try:                    # Calculate phonon spectrum                    self.compute_phonon_spectrum_dos(self.atoms, phonon, k_point_mesh)                    # check whether has imaginary frequency                    has_imaginary = self.check_imaginary_freq(phonon)                except Exception as e:                    print(&quot;Error while computing phonon spectrum and dos:&quot;, e)                    raise            else:                has_imaginary = &#39;Not calculated, set calc_spec True&#39;                phonon.save(settings=&#123;&quot;force_constants&quot;: True&#125;)        except Exception as e:            print(&quot;An error occurred during the Phonon workflow:&quot;, e)            raise        finally:            os.chdir(current_path)        return has_imaginary, phonon</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-原子大模型排名&quot;&gt;&lt;a href=&quot;#1-原子大模型排名&quot; class=&quot;headerlink&quot; title=&quot;1. 原子大模型排名&quot;&gt;&lt;/a&gt;1. 原子大模型排名&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://matbench-d</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>一些课题</title>
    <link href="http://example.com/2025/01/09/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E4%B8%80%E4%BA%9B%E8%AF%BE%E9%A2%98/"/>
    <id>http://example.com/2025/01/09/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E4%B8%80%E4%BA%9B%E8%AF%BE%E9%A2%98/</id>
    <published>2025-01-09T06:10:02.000Z</published>
    <updated>2025-07-01T01:47:33.004Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="58c81845eb3bbd6790cd8898a714d619283692282d02c1f920eb68eb9b7527d5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="课题研究" scheme="http://example.com/categories/%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>镶嵌图形</title>
    <link href="http://example.com/2025/01/02/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E9%95%B6%E5%B5%8C%E5%9B%BE%E5%BD%A2/"/>
    <id>http://example.com/2025/01/02/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E9%95%B6%E5%B5%8C%E5%9B%BE%E5%BD%A2/</id>
    <published>2025-01-02T03:07:02.000Z</published>
    <updated>2025-01-07T00:45:23.403Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="79d088dd5b4958d74509930a13fec04f9144751aa75bbfb8785681847fb55252"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="课题研究" scheme="http://example.com/categories/%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>交流站</title>
    <link href="http://example.com/2024/12/25/9-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/%E4%BA%A4%E6%B5%81%E7%AB%99/"/>
    <id>http://example.com/2024/12/25/9-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/%E4%BA%A4%E6%B5%81%E7%AB%99/</id>
    <published>2024-12-25T08:15:50.000Z</published>
    <updated>2025-06-22T01:29:52.708Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-技术站"><a href="#1-技术站" class="headerlink" title="1. 技术站"></a>1. 技术站</h1><ol><li><p><a href="https://www.coolaler.com/forums/threads/word-grindeq-math-utilities-2024.382145/">台湾硬件交流</a></p></li><li><p><a href="https://www.nodeseek.com/">NodeSeek</a></p></li><li><p><a href="https://linux.do/">LINUX DO </a></p></li></ol><h1 id="2-知识站"><a href="#2-知识站" class="headerlink" title="2.知识站"></a>2.知识站</h1><ol><li><a href="https://www.chaspark.com/#/home">黄大年茶思屋</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-技术站&quot;&gt;&lt;a href=&quot;#1-技术站&quot; class=&quot;headerlink&quot; title=&quot;1. 技术站&quot;&gt;&lt;/a&gt;1. 技术站&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.coolaler.com/</summary>
      
    
    
    
    <category term="网站收集" scheme="http://example.com/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>沸石结构</title>
    <link href="http://example.com/2024/12/17/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E6%B2%B8%E7%9F%B3%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2024/12/17/6-%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/%E6%B2%B8%E7%9F%B3%E7%BB%93%E6%9E%84/</id>
    <published>2024-12-17T02:58:35.000Z</published>
    <updated>2024-12-17T12:35:47.165Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c1225e29e7de34315ebe7e62a6df8204e3981ec4e4792c61a3c8991ac7bf5f5a">bda6ad0d5f606e7055c23f770369041ffa354e2b32a3834b155272c56f6444661ab7718603343a34c88aae20fc74544723e3f5a785c272956c08b08ed598c2b95ad0ba281bb8c0d0467d8e87b7444228cbc3c750e7d910f39d08ecda732a5f3c6f263f358037a9df260e4ccdbd524de5c21a63c50c77e9c96275c561cbd2d04cc0275330d017d2cdfa7b6ed012f55a70789ae0689d9424d0d0d965b8d9b28ec70be831f23d69ebf6dad257e2e0e0143fb6bfcd965d189060cf3ea8708d1a1db3dc7e7298e03d76070f30b5c287d73b67ab9a2bb060eee9ae7953c30b31bb99dba49e6705963dd27f9567979d705c4e76a7fbce9d7b499e3c939e4aeab1e1b7f7d797ccc9aaac9debc3a73763bafd4b575a9d7f9b2f1f10ef2fd1e07f8a6a7e1e106fc42dc85a3181bdd56f93e1fc013525f6a5b51aa6dac3adbbd847e8119f984d80c98ce2747a182b814292407cdeafa9efbd65dabdf03231b43468b4b842e9333eaf0c8c1ca423d4ad871047246b13e7b495d304f7d3ea3d1eaf96cfa9145484ab88db0e4e9fbcf3fbcb913d9b2f0992d2acf5d5d21f19ef38f158454fe7c59ccbfbb47ac5de0921e69c57bd0cbb0cdb0102a1cc0394c2abe632f8d0a5982778105396a551240047b35c4f3026436d690da2327f8d039fe480698cd8b8f6d07b5816a1cedd6aa20aa28f9811ae2c48d96539c11ed894c17c12b6856b49fb7124f81a0c80314245b87e87868257f0139c1bbc4dcadf0179850f966b84dc63a64cfa835dc672333d8d62aab373d043b3181106645017f1ca35d084faf8012f0c98119d7dc48f6cbdab0f659613e524a7c0a8d6aede4ec93ffa966a1e810f1de2b7b03db187c925789caf369f2735c1e76587d975e4f3665a03c892f0343c0cda78e0fd9b82601c92ad313333742abc53cfde004c0587e285e6a54f59e092e8db2d314959306afdb3d966cf99e713ec5501c496bda777e9945cfe1fb12aed5e55da0bf74164b44341df5f05b5b701710e85845df61502ab51d97ef92641196511da0024f330197e4e3e624c2609b8a1ecd2f8967fd991eafc1f4100d8b3a48f9bdfb7d3f77cb9e4cf73e60343d3ca2a53ae96c6cd5e0f5a1103f7774cb00f1a395cad9abd95595b4ea31817d1d58b3957</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="课题研究" scheme="http://example.com/categories/%E8%AF%BE%E9%A2%98%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>资源网站</title>
    <link href="http://example.com/2024/12/16/9-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2024/12/16/9-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/</id>
    <published>2024-12-16T08:56:28.000Z</published>
    <updated>2025-07-15T00:32:00.781Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-影视"><a href="#1-影视" class="headerlink" title="1. 影视"></a>1. 影视</h1><ol><li><a href="https://www.jitutv.me/">极兔</a></li><li><a href="https://www.netflixgc.com/">奈飞工厂</a></li><li><a href="https://submit.zone.id/">影视搜索</a>  账号：linuxdo 密码 linuxdo</li><li><a href="https://acg.063888.xyz/">LibreTV - 免费在线视频搜索与观看平台</a> 密码 linuxdo</li></ol><h1 id="2-音乐"><a href="#2-音乐" class="headerlink" title="2. 音乐"></a>2. 音乐</h1><ol><li><p><a href="https://www.hifini.com/">HiFiNi - 音乐磁场</a></p></li><li><p><a href="https://xiageba.com/">下歌吧 </a></p></li></ol><h1 id="3-游戏"><a href="#3-游戏" class="headerlink" title="3. 游戏"></a>3. 游戏</h1><ol><li><a href="https://bbs.3dmgame.com/forum.php">破解游戏论坛 3dm</a></li><li><a href="https://www.xxworld.org/">云酒馆</a></li><li><a href="https://github.com/woniu9524/couple-flying-chess">情侣飞行棋</a></li></ol><h1 id="4-聚合站"><a href="#4-聚合站" class="headerlink" title="4. 聚合站"></a>4. 聚合站</h1><ol><li><a href="https://www.ysa.cc/">伊萨书签</a></li><li><a href="https://link3.cc/galijun">咖喱君的资源库</a></li><li><a href="https://www.xygalaxy.com/">星云导航</a></li><li><a href="https://heeee.com/">资源导航</a></li><li><a href="https://axutongxue.com/">阿虚同学的储物间</a></li><li><a href="https://xydh.fun/">iLinks (高级)</a></li><li><a href="https://www.chongbuluo.com/thread-7961-1-1.html">虫部落 小众网站合集</a></li><li><a href="https://caonima.de/">骂人宝典｜祖安语录</a></li></ol><h1 id="5-阅读"><a href="#5-阅读" class="headerlink" title="5. 阅读"></a>5. 阅读</h1><ol><li><a href="https://beddystories.com/zh">BeddyStories - 全球经典儿童睡前故事库（0-12岁）</a></li><li><a href="https://www.rymdh.com/10513.html">zlibrary数字图书馆官网</a></li><li><a href="https://szsyw.cn/book">电子书导航|数字素养网</a></li><li><a href="https://www.huaijiushuku.com/">怀旧书库 - 中文老旧图书资源下载</a></li><li><a href="https://github.com/TapXWorld/ChinaTextbook/tree/master">义务教育阶段教材</a></li></ol><h1 id="7-pt站"><a href="#7-pt站" class="headerlink" title="7. pt站"></a>7. pt站</h1><blockquote><p> <a href="https://iecho.cc/2019/01/09/PT-%E4%B8%8B%E8%BD%BD%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%BB%E8%80%81/">PT 下载从入门到养老篇一：站点介绍及生存指南 | 回声</a></p><p> <a href="https://wiki.ukenn.top/pt-bt-zhong-jing-chang-jian-dao-de-ci-hui">PT &amp; BT 中经常见到的词汇 | Private Tracker Wiki</a></p><p> <a href="https://post.smzdm.com/p/aqm8opw7/">玩转PT之PT-Plugin-Plus（PT助手)</a> (<a href="https://github.com/pt-plugins/PT-Plugin-Plus/releases/tag/v1.6.1.2780">https://github.com/pt-plugins/PT-Plugin-Plus/releases/tag/v1.6.1.2780</a>)</p><p> <a href="https://wiki.scio.icu/index.php/%E5%86%B3%E5%AE%9A%E8%B8%8F%E5%85%A5PT%E5%89%8D%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85">决定踏入PT前你应该知道的事情</a></p><p> <a href="http://www.ptyqm.com/category/kfyqzc/">开放注册 | PT邀请码网</a></p><p> <a href="https://www.those.cc/652.html">pt 博客</a></p></blockquote><ol><li><a href="https://ptcafe.club/login.php">咖啡pt</a></li><li><a href="https://www.pttime.org/login.php">PTT </a></li><li><a href="https://ptlgs.org/login.php">PTLGS</a></li><li><a href="https://rousi.zip/login.php">Rousi</a></li><li><a href="https://www.icc2022.com/login.php">ICC冰淇淋 </a></li><li><a href="https://ptzone.xyz/login.php">PTzone </a></li><li><a href="https://ptfans.cc/login.php">PTFans</a></li><li><a href="https://1ptba.com/login.php">1PTBA</a></li><li><a href="https://cyanbug.net/login.php">大青虫</a></li><li><a href="https://lemonhd.club/login.php">LemonHD</a></li><li><a href="https://fsm.name/Users/login">FSM 无iyuu</a></li><li><a href="https://raingfh.top/login.php">雨</a></li><li><a href="https://pt.btschool.club/index.php">比特校园 学校</a></li><li><a href="https://52pt.site/index.php">52PT </a></li><li><a href="https://ptchina.org/index.php">铂金学院 </a></li><li><a href="https://discfan.net/torrents.php">DiscFan碟粉</a></li><li><a href="https://www.gamegamept.com/index.php">GGPT 无iyuu </a></li><li><a href="https://kp.m-team.cc/index">M-Team馒头</a></li><li><a href="https://carpt.net/torrents.php">CarPT 车站</a></li><li><a href="https://kufei.org/torrents.php">库非 </a></li><li><a href="https://hdtime.org/index.php">HDTIME</a></li><li><a href="https://ptlover.cc/ok.php?type=confirm">AFUN</a></li><li><a href="https://pt.soulvoice.club/login.php">聆音Club</a></li><li><a href="https://pt.0ff.cc/index.php">Free Farm 自由农场</a></li><li><a href="https://cspt.top/torrents.php">财神</a></li><li><a href="https://xingyunge.top/index.php">星陨阁</a></li><li><a href="https://crabpt.vip/index.php">蟹黄堡</a></li></ol><p>外站：</p><ol><li><a href="https://lusthive.org/">LustHive</a></li><li><a href="https://seedpool.org/login">seedpool</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-影视&quot;&gt;&lt;a href=&quot;#1-影视&quot; class=&quot;headerlink&quot; title=&quot;1. 影视&quot;&gt;&lt;/a&gt;1. 影视&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jitutv.me/&quot;&gt;极兔&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="网站收集" scheme="http://example.com/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="影视 音乐 游戏 pt站" scheme="http://example.com/tags/%E5%BD%B1%E8%A7%86-%E9%9F%B3%E4%B9%90-%E6%B8%B8%E6%88%8F-pt%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://example.com/2024/10/25/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/10/25/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/git%E4%BD%BF%E7%94%A8/</id>
    <published>2024-10-25T00:55:46.000Z</published>
    <updated>2024-10-25T03:16:17.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.cnblogs.com/hmy-666/p/17326120.html">www.cnblogs.com/hmy-666/p/17326120.html</a> git 分支的命令与使用</p><p>git 教程（新手向） <a href="https://zhuanlan.zhihu.com/p/135183491">Git 使用教程：最详细、最傻瓜、最浅显、真正手把手教！（万字长文） - 知乎</a></p><p>[Git 基本命令 – 你用过 git diff 吗？补习一下吧 - 知乎](<a href="https://zhuanlan.zhihu.com/p/148312377#:~:text=%E8%BF%90%E8%A1%8C">https://zhuanlan.zhihu.com/p/148312377#:~:text=运行</a> git log –pretty%3Doneline –abbrev-commit 命令看一下当前分支的提交记录，选择两个进行比较。 运行 git,commit 的差异： 好奇宝宝附体，咱们颠倒一下 commit 之间的顺序，看看差异效果 可以看到，比较对象的先后顺序决定了 diff 的差异结果的「增删」。)</p></blockquote><ul><li>概念合集</li></ul><p>远程服务器 远程分支 本地分支 远程跟踪分支&#x3D;&#x3D; 上游分支</p><p><strong>命令合集</strong></p><ul><li><p>查看分支<code>git branch</code></p></li><li><p>创建分支 <code>git branch &lt;本地分支&gt;</code></p></li><li><p>切换分支 <code>git checkout &lt;本地分支&gt;</code></p></li><li><p>当前分支跟踪远程分支 <code>git branch -u &lt;仓库&gt;/&lt;远程分支&gt;</code></p></li><li><p>将当前分支推送到远程仓库并跟踪新分支或旧分支 <code>git push -u &lt;远程仓库&gt; &lt;远程分支&gt;</code>  <strong>不适合直接修改完提交，会把仓库内旧分支覆盖，可以建一个新分支</strong></p></li><li><p>合并某分支到当前分支 <code>git merge &lt;远程分支&gt;</code> (需要先git fetch) 或者<code>&lt;本地分支&gt;</code></p></li><li><p>删除分支 <code>git branch -d name </code></p></li><li><p>创建本地分支跟踪远程分支 <code>git checkout -b  &lt;新建本地分支&gt; &lt;远程服务器分支&gt;/&lt;远程分支（上游分支&gt;</code> （本地分支和追踪的远程分支不要求名字一定想同）</p></li><li><p>指定已有的分支跟踪远程分支 </p><p><code>git branch &lt;已有的分支&gt; -u &lt;远程服务器分支&gt;/&lt;远程分支&gt; </code>   (u&#x3D; –set upstream-to)</p><p>如果在本地分支下可以 <code>git branch -u &lt;远程仓库&gt;/&lt;远程分支&gt;</code></p></li><li><p>查看远程分支和本地分支跟踪情况</p><p><code>git branch -vv</code></p></li><li><p>删除远程分支</p></li><li><p><code>git push &lt;远程仓库&gt;</code> –delete &lt;远程分支&gt;</p></li><li><p>获取所有分支的更新 <code>git fetch origin</code>  </p><p>获取特定分支的更新 <code>git fetch origin &lt;分支名称&gt;</code></p><p>显示区别 <code>git log / git diff</code></p><p>合并某分支到当前 <code>git merge origin/&lt;远程分支&gt;</code></p></li><li><p><code>git pull</code> 是git fetch 和git merge的组合  <code>git pull origin main</code> &#x3D;&#x3D; <code>git fetch origin </code> + <code>git merge origin/main</code></p></li><li><p>查看所有远程分支 <code>git remote show &lt;远程仓库&gt;</code> ；<code>git fetch </code> + <code>git branch -r</code>  or <code>git branch -a</code></p></li><li><p><code>git pull &lt;仓库名&gt; &lt;仓库分支&gt;:&lt;本地分支&gt;</code>  将仓库与本地分支合并，如果是当前分支，不需要冒号后面的内容</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hmy-666/p/17326120.html&quot;&gt;www.cnblogs.com/hmy-666/p/17326120.html&lt;/a&gt; git 分支的命令与使用&lt;/p&gt;
&lt;p&gt;git</summary>
      
    
    
    
    <category term="linux学习使用" scheme="http://example.com/categories/linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>manjaro学习笔记</title>
    <link href="http://example.com/2024/10/03/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/manjaro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/10/03/5-linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/manjaro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-10-03T03:38:17.000Z</published>
    <updated>2024-11-08T02:06:44.886Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-pacman"><a href="#1-pacman" class="headerlink" title="1. pacman"></a>1. pacman</h1><h1 id="2-配置中文输入法"><a href="#2-配置中文输入法" class="headerlink" title="2.配置中文输入法"></a>2.配置中文输入法</h1><blockquote><p><a href="https://blog.csdn.net/Mingcai_Xiong/article/details/138989121">https://blog.csdn.net/Mingcai_Xiong/article/details/138989121</a></p></blockquote><h1 id="3-安装v2ray代理"><a href="#3-安装v2ray代理" class="headerlink" title="3. 安装v2ray代理"></a>3. 安装v2ray代理</h1><blockquote><p><a href="https://www.wannaexpresso.com/2020/02/23/manjaro-v2ray/">https://www.wannaexpresso.com/2020/02/23/manjaro-v2ray/</a></p><p><a href="https://toutyrater.github.io/prep/start.html">https://toutyrater.github.io/prep/start.html</a></p><p><a href="https://www.v2ray.com/chapter_00/start.html">https://www.v2ray.com/chapter_00/start.html</a></p></blockquote><h1 id="4-修改zsh为bash的shell"><a href="#4-修改zsh为bash的shell" class="headerlink" title="4. 修改zsh为bash的shell"></a>4. 修改zsh为bash的shell</h1><pre><code class="shell">sudo chsh -s --shell /bin/bash lizhao注销后登录</code></pre><h1 id="5-挂载u盘"><a href="#5-挂载u盘" class="headerlink" title="5. 挂载u盘"></a>5. 挂载u盘</h1><blockquote><p><a href="https://blog.csdn.net/qq_37677519/article/details/78160733">https://blog.csdn.net/qq_37677519/article/details/78160733</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003222642109.png" alt="image-20241003222642109"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003222653282.png" alt="image-20241003222653282"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003222706833.png" alt="image-20241003222706833"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003222736874.png" alt="image-20241003222736874"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003222854582.png" alt="image-20241003222854582"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003223013889.png" alt="image-20241003223013889"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003223028021.png" alt="image-20241003223028021"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20241003223136102.png" alt="image-20241003223136102"></p><h1 id="1-关于-systemctl"><a href="#1-关于-systemctl" class="headerlink" title="1. 关于 systemctl"></a>1. 关于 systemctl</h1><p><a href="https://www.cnblogs.com/zwcry/p/9602756.html">https://www.cnblogs.com/zwcry/p/9602756.html</a></p><h1 id="2-使用conections从linux连接windows"><a href="#2-使用conections从linux连接windows" class="headerlink" title="2.使用conections从linux连接windows"></a>2.使用conections从linux连接windows</h1><h1 id="3-使用samba访问nas文件"><a href="#3-使用samba访问nas文件" class="headerlink" title="3.使用samba访问nas文件"></a>3.使用samba访问nas文件</h1><p><a href="https://coda.world/linux-and-samba-share/#:~:text=%E7%94%A8%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE">https://coda.world/linux-and-samba-share/#:~:text=%E7%94%A8%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE</a></p><p>另一种（不优雅）：smbclient &#x2F;&#x2F;192.168.110.13&#x2F;Home1 -U 18843101769%1021</p><h1 id="4-配置代理"><a href="#4-配置代理" class="headerlink" title="4. 配置代理"></a>4. 配置代理</h1><p><a href="https://zhuanlan.zhihu.com/p/676022554#:~:text=%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4">https://zhuanlan.zhihu.com/p/676022554#:~:text=%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4</a></p><h1 id="5-使用快照备份系统"><a href="#5-使用快照备份系统" class="headerlink" title="5.使用快照备份系统"></a>5.使用快照备份系统</h1><p><a href="https://cn.linux-console.net/?p=19103#:~:text=%E6%9C%AC%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97%E5%90%91%E6%82%A8%E5%B1%95%E7%A4%BA">https://cn.linux-console.net/?p=19103#:~:text=%E6%9C%AC%E5%88%9D%E5%AD%A6%E8%80%85%E6%8C%87%E5%8D%97%E5%90%91%E6%82%A8%E5%B1%95%E7%A4%BA</a></p><h1 id="6-使用Backups备份文件"><a href="#6-使用Backups备份文件" class="headerlink" title="6.使用Backups备份文件"></a>6.使用Backups备份文件</h1><h1 id="7-安装微信"><a href="#7-安装微信" class="headerlink" title="7.安装微信"></a>7.安装微信</h1><p><a href="https://wenku.csdn.net/answer/4tppvuy282">https://wenku.csdn.net/answer/4tppvuy282</a></p><h1 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8.常用命令"></a>8.常用命令</h1><p><a href="https://cloud.tencent.com/developer/article/2223411">https://cloud.tencent.com/developer/article/2223411</a></p><h1 id="9-添加AUR源"><a href="#9-添加AUR源" class="headerlink" title="9.添加AUR源"></a>9.添加AUR源</h1><p><a href="https://cloud.tencent.com/developer/article/1948468">https://cloud.tencent.com/developer/article/1948468</a></p><h1 id="10-pamac无法查看分类-和AUR源"><a href="#10-pamac无法查看分类-和AUR源" class="headerlink" title="10. pamac无法查看分类 和AUR源"></a>10. pamac无法查看分类 和AUR源</h1><p>关闭软件模式</p><p><img src="/../../%E5%9B%BE%E7%89%87/image-20241008110252006.png" alt="image-20241008110252006"></p><ul><li><p>查看AUR源需要再点一下搜索，使用pamac命令在命令行搜索能够查找AUR源</p><p>或者关掉然后重新开启以下</p><p>查看源是否有问题 yay -p -Q</p></li></ul><h1 id="11-使用rsync备份文件"><a href="#11-使用rsync备份文件" class="headerlink" title="11.使用rsync备份文件"></a>11.使用rsync备份文件</h1><p><a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">https://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p><h1 id="12-将用户加到管理员组"><a href="#12-将用户加到管理员组" class="headerlink" title="12.将用户加到管理员组"></a>12.将用户加到管理员组</h1><p><code>sudo usermod -aG wheel lizhao</code></p><h1 id="13-command命令"><a href="#13-command命令" class="headerlink" title="13.command命令"></a>13.command命令</h1><p>command -V </p><h1 id="14-关于路由、端口、主机动态ip、静态ip、主机mac"><a href="#14-关于路由、端口、主机动态ip、静态ip、主机mac" class="headerlink" title="14.关于路由、端口、主机动态ip、静态ip、主机mac"></a>14.关于路由、端口、主机动态ip、静态ip、主机mac</h1><ul><li><p>路由分配给主机ip, 这个主机相当于挂载在路由上的一个端口上。需要首先由路由分配给主机一个静态ip（从LAN设置）和设置一个端口映射，</p></li><li><p>主机应该打开sshd服务，这样外面的机器可以访问本地 </p><p><code>systemctl start sshd</code></p></li><li><p>同一个路由下的主机的ip地址前几个是相同的，可以通过输入前几个进入路由设置</p></li><li><p>访问时，访问路由的特定端口，然后 由路由转到主机</p></li><li><p>访问路由可以通过 ip address 查看ip,然后删除最后的数字换成1</p></li></ul><p><img src="/../../%E5%9B%BE%E7%89%87/image-20241008164703168.png" alt="image-20241008164703168"></p><p><img src="/../../%E5%9B%BE%E7%89%87/image-20241008165352346.png" alt="image-20241008165352346"></p><h1 id="15-xdotool工具"><a href="#15-xdotool工具" class="headerlink" title="15. xdotool工具"></a>15. xdotool工具</h1><p><a href="http://git.malu.me/xdotool%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/w">http://git.malu.me/xdotool%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/w</a></p><h1 id="16-不同系统的区别"><a href="#16-不同系统的区别" class="headerlink" title="16.不同系统的区别"></a>16.不同系统的区别</h1><p><a href="https://www.51cto.com/article/621615.html">https://www.51cto.com/article/621615.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-pacman&quot;&gt;&lt;a href=&quot;#1-pacman&quot; class=&quot;headerlink&quot; title=&quot;1. pacman&quot;&gt;&lt;/a&gt;1. pacman&lt;/h1&gt;&lt;h1 id=&quot;2-配置中文输入法&quot;&gt;&lt;a href=&quot;#2-配置中</summary>
      
    
    
    
    <category term="linux学习使用" scheme="http://example.com/categories/linux%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>不同的主动学习方法</title>
    <link href="http://example.com/2024/08/29/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%BB%E5%8A%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/08/29/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%BB%E5%8A%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</id>
    <published>2024-08-29T00:08:58.000Z</published>
    <updated>2024-08-29T07:47:17.058Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-随机位移的方法"><a href="#1-随机位移的方法" class="headerlink" title="1. 随机位移的方法"></a>1. 随机位移的方法</h1><p><strong>给整个结构中的原子引入随机位移，代替md过程，增加采样</strong></p><p>核心脚本</p><p><code>random_distance.py</code></p><p>需要的文件</p><p><code>sub-grade.sh  POSCAR inv2 </code></p><pre><code class="python">import numpy as npfrom sys import argvfrom ase.atoms import Atomsfrom ase.io import readimport osimport subprocessimport shutildef write2my(file_path, ene_i, lat_i, ele_i, coo_i, foc_i, vir_i=None):    lat_i = lat_i.reshape(3, 3)    coo_i = coo_i.reshape(-1, 3)    foc_i = foc_i.reshape(-1, 3)    with open(file_path, &#39;w&#39;) as file:        file.write(f&quot;# total energy = &#123;ene_i&#125; eV\n\n&quot;)        if vir_i is not None:            vir_i = np.array(vir_i).reshape(-1)            file.write(f&quot;VIRIAL\n&quot;)            for i in vir_i:                file.write(f&#39;&#123;i:20.8f&#125;&#39;)        file.write(&quot;\n&quot;)        file.write(&quot;CRYSTAL\n&quot;)        file.write(&quot;PRIMVEC\n&quot;)        for j in lat_i:            for k in j:                file.write(f&#39;&#123;k:20.8f&#125;&#39;)            file.write(&#39;\n&#39;)        file.write(&quot;PRIMCOORD\n&quot;)        file.write(f&quot;&#123;len(coo_i)&#125; 1\n&quot;)        for j in range(len(coo_i)):            file.write(f&#39;&#123;ele_i[j]:2&#125;&#39;)            # coo            for k in coo_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            # force            for k in foc_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            file.write(&quot;\n&quot;)    passdef read_from_ase_atoms(atoms: Atoms):    try:        ene = atoms.get_potential_energy()    except:        ene = 0.0    lat = atoms.get_cell()    pos = atoms.get_positions()    try:        foc = atoms.get_forces()    except:        foc = np.zeros_like(pos)    try:        sts = atoms.get_stress()        xx, yy, zz, yz, xz, xy = - sts * atoms.get_volume()        vir = np.array(            [[xx, xy, xz],             [xy, yy, yz],             [xz, yz, zz]]).reshape(-1)    except:        vir = np.zeros([3, 3])    ele = atoms.get_chemical_symbols()    return ene, lat, pos, foc, vir, eledef read_poscar(filename):    with open(filename,&#39;r&#39;) as file:        lines =file.readlines()    title =lines[0].strip()    scale =float(lines[1].strip())    #for i in range(2,5):    #    lattice_list.append(list(map(float,line[i].split())))    #lattice_array=np.array(lattice_list)    lattice_vectors = np.array([list(map(float,lines[i].split())) for i in range(2,5)])    element_type=lines[5].split()    atomnumbers=np.array(list(map(int,lines[6].split())))    atompositions=np.array([list(map(float,lines[i].split()[:3])) for i in range(8,8+sum(atomnumbers))])    cor_type = lines[7].strip()    if cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        atompositions[atompositions &lt; 0]+=1        atompositions[atompositions &gt;=1]-=1    elif cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:        pass    return(title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions)def write_poscar(filename,title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions):     with open(filename,&#39;w&#39;) as file:        file.write(f&quot;&#123;title&#125;\n&quot;)        file.write(f&quot;&#123;scale&#125;\n&quot;)        for vec in lattice_vectors:            file.write(f&quot;&#123;vec[0]:.8f&#125;  &#123;vec[1]:.8f&#125;  &#123;vec[2]:.8f&#125;\n&quot;)        #&quot;  &quot;.join用于将可迭代对象的元素以空格连接起来        file.write(&quot;  &quot;.join(element_type)+ &quot;\n&quot;)        file.write(&quot;  &quot;.join(map(str,atomnumbers))+ &quot;\n&quot;)        file.write(f&quot;&#123;cor_type&#125;\n&quot;)        for pos in atompositions:            file.write(f&quot;&#123;pos[0]:.8f&#125;  &#123;pos[1]:.8f&#125;  &#123;pos[2]:.8f&#125;\n&quot;)def change_dir_to_car(filename):    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions= read_poscar(filename)    if cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:        pass    elif cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        atompositions = np.dot(atompositions,lattice_vectors)        cor_type = &quot;Cartesian&quot;    return title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositionsdef atom_pos(atomnumbers,atompositions):    atom_pos = np.split(atompositions,np.cumsum(atomnumbers)[:-1])    return atom_posparent_dir = os.path.dirname(os.getcwd())oos_dir = os.path.join(parent_dir, &quot;oos&quot;)os.makedirs(oos_dir, exist_ok=True)counter = 0counter2 = 0counter3 = 0exit_flag = Falsefor itera in range(1, 100):    if exit_flag:        break    mignitude1 = 0.0018*itera    mignitude2 = 0.0009*itera    mignitude3 = 0.0017*itera    mignitude4 = 0.0022*itera        title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions=change_dir_to_car(&quot;POSCAR&quot;)        atom_pos = atom_pos(atomnumbers,atompositions)    for i in range(1,10001):        counter3 +=1        if exit_flag:            break        counter +=1        rd1=np.random.randn(atomnumbers[0],3)*mignitude1        rd2=np.random.randn(atomnumbers[1],3)*mignitude1        rd3=np.random.randn(atomnumbers[2],3)*mignitude1        rd4=np.random.randn(atomnumbers[3],3)*mignitude1        atom_pos[0]+=rd1        atom_pos[1]+=rd2        atom_pos[2]+=rd3        atom_pos[3]+=rd4        atompositions = np.concatenate(atom_pos)        write_poscar(f&quot;&#123;counter&#125;.vasp&quot;,title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions)        datas = read(f&quot;&#123;counter&#125;.vasp&quot;, index=&quot;:&quot;)        ene, lat, pos, foc, vir, ele = read_from_ase_atoms(datas[0])        write2my(            f&quot;&#123;counter&#125;.xsf&quot;,            ene_i=ene,            lat_i=lat,            ele_i=ele,            coo_i=pos,            foc_i=foc,            vir_i=vir)        os.remove(f&quot;&#123;counter&#125;.vasp&quot;)        print(counter3)        if counter3 &gt;= 100:            subprocess.run([&quot;sh&quot;, &quot;sub-grade.sh&quot;], check=True)            with open(&quot;grade-log&quot;, &#39;r&#39;) as file:                lines = file.readlines()                        for line in lines:                if exit_flag:                    break                if &#39;grad:&#39; in line:                    parts = line.split()                    filename = parts[0]                    grade_value = float(parts[-1])                    if 3 &lt; grade_value &lt; 8:                        counter2 += 1                        if counter2 &gt;= 50:                            exit_flag = True                            break                        src = os.path.join(os.getcwd(), filename)                        dst = os.path.join(oos_dir, filename)                        shutil.move(src, dst)                    else:                        os.remove(filename)                    counter3 = 0            </code></pre><p><code>iter_scheduling_remote.sh</code> 中修改的内容</p><pre><code class="shell">echo &quot;Simulation ...&quot;# run local &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;mkdir random_vaspmv sub-grade.sh random_vaspmv Ap_inv* random_vaspmv inv2 random_vaspmv random_distance.py random_vaspmv POSCAR random_vaspcd random_vasppython random_distance.py</code></pre><h1 id="2-切割的方法"><a href="#2-切割的方法" class="headerlink" title="2. 切割的方法"></a>2. 切割的方法</h1><p>切割后的结构grade比较大，不太好用</p><pre><code class="python">&quot;&quot;&quot;输入可以有多种形式,输出目前只有writ_poscar可以&quot;&quot;&quot;import numpy as npimport osfrom ase.atoms import Atomsfrom ase.io import readimport subprocessimport shutildef write2my(file_path, ene_i, lat_i, ele_i, coo_i, foc_i, vir_i=None):    lat_i = lat_i.reshape(3, 3)    coo_i = coo_i.reshape(-1, 3)    foc_i = foc_i.reshape(-1, 3)    with open(file_path, &#39;w&#39;) as file:        file.write(f&quot;# total energy = &#123;ene_i&#125; eV\n\n&quot;)        if vir_i is not None:            vir_i = np.array(vir_i).reshape(-1)            file.write(f&quot;VIRIAL\n&quot;)            for i in vir_i:                file.write(f&#39;&#123;i:20.8f&#125;&#39;)        file.write(&quot;\n&quot;)        file.write(&quot;CRYSTAL\n&quot;)        file.write(&quot;PRIMVEC\n&quot;)        for j in lat_i:            for k in j:                file.write(f&#39;&#123;k:20.8f&#125;&#39;)            file.write(&#39;\n&#39;)        file.write(&quot;PRIMCOORD\n&quot;)        file.write(f&quot;&#123;len(coo_i)&#125; 1\n&quot;)        for j in range(len(coo_i)):            file.write(f&#39;&#123;ele_i[j]:2&#125;&#39;)            # coo            for k in coo_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            # force            for k in foc_i[j]:                file.write(f&quot;&#123;k:20.8f&#125;&quot;)            file.write(&quot;\n&quot;)    passdef read_from_ase_atoms(atoms: Atoms):    try:        ene = atoms.get_potential_energy()    except:        ene = 0.0    lat = atoms.get_cell()    pos = atoms.get_positions()    try:        foc = atoms.get_forces()    except:        foc = np.zeros_like(pos)    try:        sts = atoms.get_stress()        xx, yy, zz, yz, xz, xy = - sts * atoms.get_volume()        vir = np.array(            [[xx, xy, xz],             [xy, yy, yz],             [xz, yz, zz]]).reshape(-1)    except:        vir = np.zeros([3, 3])    ele = atoms.get_chemical_symbols()    return ene, lat, pos, foc, vir, eledef read_poscar(filename):    with open(filename,&#39;r&#39;) as file:        lines =file.readlines()    title =lines[0].strip()    scale =float(lines[1].strip())    #for i in range(2,5):    #    lattice_list.append(list(map(float,line[i].split())))    #lattice_array=np.array(lattice_list)    lattice_vectors = np.array([list(map(float,lines[i].split())) for i in range(2,5)])    element_type=lines[5].split()    atomnumbers=np.array(list(map(int,lines[6].split())))    atompositions=np.array([list(map(float,lines[i].split()[:3])) for i in range(8,8+sum(atomnumbers))])    cor_type = lines[7].strip()    if cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        atompositions[atompositions &lt; 0]+=1        atompositions[atompositions &gt;=1]-=1    elif cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:        pass    return(title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions)def write_poscar(filename,title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions):     with open(filename,&#39;w&#39;) as file:        file.write(f&quot;&#123;title&#125;\n&quot;)        file.write(f&quot;&#123;scale&#125;\n&quot;)        for vec in lattice_vectors:            file.write(f&quot;&#123;vec[0]:.8f&#125;  &#123;vec[1]:.8f&#125;  &#123;vec[2]:.8f&#125;\n&quot;)        #&quot;  &quot;.join用于将可迭代对象的元素以空格连接起来        file.write(&quot;  &quot;.join(element_type)+ &quot;\n&quot;)        file.write(&quot;  &quot;.join(map(str,atomnumbers))+ &quot;\n&quot;)        file.write(f&quot;&#123;cor_type&#125;\n&quot;)        for pos in atompositions:            file.write(f&quot;&#123;pos[0]:.8f&#125;  &#123;pos[1]:.8f&#125;  &#123;pos[2]:.8f&#125;\n&quot;)#输出不同类型原子的坐标def atom_pos(atomnumbers,atompositions):    atom_pos = np.split(atompositions,np.cumsum(atomnumbers)[:-1])    return atom_pos        &quot;&quot;&quot;功能区&quot;&quot;&quot;#计算体积def cal_volume(lattice_vectors):    volume = np.abs(np.dot(lattice_vectors[0],np.cross(lattice_vectors[1],lattice_vectors[2])))    return volume#转换分数坐标为笛卡尔坐标def change_dir_to_car(filename):    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions= read_poscar(filename)    if cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:        pass    elif cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        atompositions = np.dot(atompositions,lattice_vectors)        cor_type = &quot;Cartesian&quot;    return title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions#笛卡尔坐标转换为分数坐标def change_car_to_dir(filename):    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions = read_poscar(filename)    if cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:        atompositions = np.dot(atompositions,np.linalg.inv(lattice_vectors))        cor_type = &quot;Direct&quot;        atompositions[atompositions &lt; 0]+=1        atompositions[atompositions &gt;=1]-=1    elif cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        pass    return title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions#晶格向量的变换def lattice_change(filename,cell_type):    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions= change_car_to_dir(filename)    if cell_type == &#39;211&#39;:        pass    elif cell_type == &quot;121&quot;:        middle_value = lattice_vectors[0].copy()        lattice_vectors[0] = lattice_vectors[1]        lattice_vectors[1] = lattice_vectors[2]        lattice_vectors[2] = middle_value        middle_value2 = atompositions[:,0].copy()        atompositions[:,0] = atompositions[:,1]        atompositions[:,1] = atompositions[:,2]        atompositions[:,2] = middle_value2    elif cell_type == &quot;112&quot;:        middle_value = lattice_vectors[0].copy()        lattice_vectors[0] = lattice_vectors[2]        lattice_vectors[2] = lattice_vectors[1]        lattice_vectors[1] = middle_value        middle_value2 = atompositions[:,0].copy        atompositions[:,0] = atompositions[:,2]        atompositions[:,2] = atompositions[:,1]        atompositions[:,1] = middle_value2    return title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions#将211晶胞分解为两个111晶胞def split_211(input_file,cell_type,output_file1,output_file2):    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions= lattice_change(input_file,cell_type)    atom_type_pos = atom_pos(atomnumbers,atompositions)    total_atoms1 = []    total_atoms_number1 = []    total_atoms2 = []    total_atoms_number2 = []    if cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        for sub_atom_type_pos in atom_type_pos:            print(sub_atom_type_pos)            coord_1=sub_atom_type_pos[sub_atom_type_pos[:,0]&lt;=0.48].copy()            total_atoms1.append(coord_1)            total_atoms_number1.append(len(coord_1))                    coord_2=sub_atom_type_pos[sub_atom_type_pos[:,0]&gt;0.52].copy()            total_atoms2.append(coord_2)            total_atoms_number2.append(len(coord_2))    # elif cor_type.lower() == &quot;cartesian&quot; or cor_type.lower() == &quot;c&quot;:    #     for sub_atom_type_pos in atom_type_pos:    #         sub_atom_type_pos=np.dot(sub_atom_type_pos,np.linalg.inv(lattice_vectors))    #         sub_atom_type_pos[sub_atom_type_pos &lt; 0]+=1    #         sub_atom_type_pos[sub_atom_type_pos &gt;=1]-=1    #         coord_1=sub_atom_type_pos[sub_atom_type_pos[:,0]&lt;=0.5].copy()    #         total_atoms1.append(coord_1)    #         total_atoms_number1.append(len(coord_1))            #         coord_2=sub_atom_type_pos[sub_atom_type_pos[:,0]&gt;0.5].copy()    #         total_atoms2.append(coord_2)    #         total_atoms_number2.append(len(coord_2))    #     cor_type = &quot;Direct&quot;    total_atoms1=np.vstack(total_atoms1)    total_atoms2=np.vstack(total_atoms2)    total_atoms1=np.dot(total_atoms1,lattice_vectors)    total_atoms2=np.dot(total_atoms2,lattice_vectors)    lattice_vectors[0]/=2    cor_type =&quot;Cartesian&quot;    # print(total_atoms1)    # print(total_atoms_number1)    write_poscar(output_file1,title,scale,lattice_vectors,element_type,total_atoms_number1,cor_type,total_atoms1)    write_poscar(output_file2,title,scale,lattice_vectors,element_type,total_atoms_number2,cor_type,total_atoms2)#POSCAR坐标的修改def coords_change(axis,value,cor_type,atompositions):    if cor_type.lower() == &quot;Cartesian&quot; or cor_type.lower() == &quot;c&quot;:        print(&quot;use change_car_to_dir to input&quot;)    elif cor_type.lower() == &quot;direct&quot; or cor_type.lower() == &quot;d&quot;:        if axis == &#39;x&#39;:           atompositions[:,0] += value        elif axis == &#39;y&#39;:           atompositions[:,1] += value        elif axis == &#39;z&#39;:           atompositions[:,2] += value        else:            raise ValueError(f&quot;invalid axis&quot;)    else:        raise ValueError(f&quot;invalid cor_type&quot;)    return atompositions#切割x*y*z倍的晶胞为x*y*z个晶胞def split_cell(input_file,x,y,z):    input_file_without_ext = os.path.splitext(input_file)[0]    title,scale,lattice_vectors,element_type,atomnumbers,cor_type,atompositions= change_car_to_dir(input_file)    atom_type_pos = atom_pos(atomnumbers,atompositions)    total_cells = [[[&#123;elem:[] for elem in element_type&#125; for _ in range(z)] for _ in range(y)] for _ in range(x)]    total_atom_numbers = [[[&#123;elem: 0 for elem in element_type&#125; for _ in range(z)] for _ in range(y)] for _ in range(x)]    if cor_type.lower() == &quot;direct&quot; or cor_type.lower == &quot;d&quot;:        for elem_index,sub_atom_type_pos in enumerate(atom_type_pos):            elem = element_type[elem_index]            for atom in sub_atom_type_pos:                ix = int(atom[0]*x)                iy = int(atom[1]*y)                iz = int(atom[2]*z)                total_cells[ix][iy][iz][elem].append(atom)                total_atom_numbers[ix][iy][iz][elem] += 1    cor_type =&quot;Cartesian&quot;    lattice_vectors_changed = np.zeros((3,3))    lattice_vectors_changed[0] = lattice_vectors[0]/x    lattice_vectors_changed[1] = lattice_vectors[1]/y    lattice_vectors_changed[2] = lattice_vectors[2]/z    os.makedirs(&quot;xsf_output&quot;)    for ix in range(x):        for iy in range(y):            for iz in range(z):                output_file =f&quot;&#123;input_file_without_ext&#125;_&#123;ix&#125;&#123;iy&#125;&#123;iz&#125;.vasp&quot;                sub_atoms = np.vstack([atom for elem in element_type for atom in total_cells[ix][iy][iz][elem]])                sub_atoms = np.dot(sub_atoms, lattice_vectors)                subcell_numbers = [total_atom_numbers[ix][iy][iz][elem] for elem in element_type]                write_poscar(output_file,title,scale,lattice_vectors_changed,element_type,subcell_numbers,cor_type,sub_atoms)                datas = read(output_file, index=&quot;:&quot;)                ene, lat, pos, foc, vir, ele = read_from_ase_atoms(datas[0])                output_file_path = os.path.join(&quot;xsf_output&quot;, f&quot;&#123;output_file&#125;.xsf&quot;)                write2my(                    output_file_path,                    ene_i=ene,                    lat_i=lat,                    ele_i=ele,                    coo_i=pos,                    foc_i=foc,                    vir_i=vir)split_cell(&quot;POSCAR&quot;,2,2,2)#os.remove(&quot;POS&quot;)subprocess.run([&quot;dsub&quot;,&quot;-s&quot;,&quot;sub-grade.sh&quot;], check=True)counter = 0with open(&quot;grade-log&quot;, &#39;r&#39;) as file:    lines = file.readlines()    for line in lines:        if &#39;grad:&#39; in line:            parts = line.split()            filename = parts[0]            filename_first = os.path.splitext(filename)[0]            grade_value = float(parts[-1])            if 3 &lt; grade_value &lt; 8:                os.makedirs(filename_first)                shutil.move(f&quot;&#123;filename_first&#125;&quot;, os.path.join (filename_first, &quot;POSCAR&quot;))            else:                os.remove(f&quot;&#123;filename_first&#125;&quot;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-随机位移的方法&quot;&gt;&lt;a href=&quot;#1-随机位移的方法&quot; class=&quot;headerlink&quot; title=&quot;1. 随机位移的方法&quot;&gt;&lt;/a&gt;1. 随机位移的方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;给整个结构中的原子引入随机位移，代替m</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>高精度数据集构建步骤</title>
    <link href="http://example.com/2024/08/10/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2024/08/10/4-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B0%E6%8D%AE%E9%9B%86%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A4/</id>
    <published>2024-08-10T06:04:46.000Z</published>
    <updated>2024-08-14T01:21:01.579Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><hr><ol><li><p>给每个文件分配文件夹</p><pre><code class="shell">counter=0for file in *;do if [ -f &quot;$file&quot; ];then    new_folder=&quot;$counter&quot;    mkdir -p &quot;$new_folder&quot;    mv &quot;$file&quot; &quot;$new_folder&quot;    counter=&quot;$((counter+1))&quot;fidone</code></pre></li><li><p>准备计算文件</p><p><code>for i in */;do cp my2poscar.py $i;cd $i;python my2poscar.py *.xsf POSCAR;cd ..;done</code></p><p><code>for i in */;do cp makepot.py $i;cd $i;python makepot.py ;cd ..;done</code></p></li><li><p>先找出所有的原子数为单胞的结构</p></li></ol><p><code>grep -B 1 &#39;Car&#39; POSCAR | awk &#39;/Car/ &#123;print $0&#125;&#39; &gt; atom_number.dat</code></p><p><code>grep 72 atom_number.dat &gt; 72.dat</code></p><p><code>grep 144 atom_number.dat &gt; 144.dat</code></p><p>可以做两遍，把那些原子数多的都删除掉</p><ol start="2"><li><p>对找出的单胞进行高精度自洽计算</p></li><li><p>检验有没有没有进行计算的目录(找OSZICAR)</p><p><code>find . -type d ! -exec test -e &#39;&#123;&#125;/OSZICAR&#39; \; -print</code></p></li><li><p>检查有哪些没有计算成功</p></li></ol><p>​       <code>grep -rl &quot;vasp.6.1.0&quot; */OUTCAR | xargs grep -L &quot;CPU&quot;</code></p><ol start="4"><li>构建数据集，进行新的机器学习势训练</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给每个文件分配文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;counter=0
for file in *;
do 
if [ -f &amp;quot;$file&amp;quot; ];then
    new_</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>OER台阶图</title>
    <link href="http://example.com/2024/07/18/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/OER%E5%92%8CHER/"/>
    <id>http://example.com/2024/07/18/2-%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/OER%E5%92%8CHER/</id>
    <published>2024-07-18T12:55:56.000Z</published>
    <updated>2024-09-26T02:30:51.742Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-关于催化理论知识"><a href="#1-关于催化理论知识" class="headerlink" title="1. 关于催化理论知识"></a>1. 关于催化理论知识</h1><blockquote><ol><li>Bifunctional CoNx embedded graphene electrocatalysts for OER and ORR: A theoretical evaluation</li><li><a href="https://www.bilibili.com/video/BV1Q7411k7NU/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">VASP电催化，OER&#x2F;ORR计算实例【电催化课程2】_哔哩哔哩_bilibili</a></li><li><a href="https://www.bigbrosci.com/2018/11/06/ex68/">Ex68 频率，零点能，吉布斯自由能的计算 | Learn VASP The Hard Way (bigbrosci.com)</a></li><li><a href="https://blog.shishiruqi.com/2019/04/21/freenergy/">校正分子和吸附分子自由能 | 世事如棋 (shishiruqi.com)</a></li><li><a href="https://www.bilibili.com/video/BV1aH4y1278C/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">催化OER计算：PH值对反应自由能影响 | 【华算科技朱老师讲DFT-VASP】_哔哩哔哩_bilibili</a></li></ol></blockquote><h2 id="1-ORR-and-OER"><a href="#1-ORR-and-OER" class="headerlink" title="1. ORR and OER"></a>1. ORR and OER</h2><ul><li>ORR : oxygen reduction reaction 氧还原反应</li><li>OER : oxygen evolution reaction  氧析出反应</li></ul><p>用于金属-空气电池</p><h3 id="1-OER-：氧气析出过程-氢气脱离过程"><a href="#1-OER-：氧气析出过程-氢气脱离过程" class="headerlink" title="1. OER ：氧气析出过程&#x2F;氢气脱离过程"></a>1. OER ：氧气析出过程&#x2F;氢气脱离过程</h3><blockquote><p>H2O   to OH and H+ and e-</p><p>其中，H+ and e-的能量用1&#x2F;2 H2表示</p><p>H2O是液态水分子的能量，等于饱和蒸汽压下的水蒸汽能量（常温下 ~0.035 bar) 用vaspkit-502-298.15-0.035-1计算</p><p>OH to O</p><p>O and H2O to OOH</p><p>OOH to O2</p><p>氧气自由能不能直接计算，需要用2G(H2O)-2G(H2)-G(O2)&#x3D;-4.92 eV计算，以保证总包的反应能量。同理，CO N2也需要能量反推</p><p>O2 脱吸附</p></blockquote><p>其中，前四步是电子过程，也是通常台阶图包括的</p><hr><h2 id="3-计算过程"><a href="#3-计算过程" class="headerlink" title="3. 计算过程"></a>3. 计算过程</h2><ol><li><p>计算H2O H2 O2 的自由能 (需要修正能量 H2O用饱和蒸汽压的方法;注意算频率的一步只能得到修正的能量，不能用最后的总能当作最后的总能，总能看正常优化、自洽后的总能；氧气自由能不能直接计算(自旋多重度），需要用2G(H2O)-2G(H2)-G(O2)&#x3D;-4.92 eV，注意添加自旋极化 ISYM&#x3D;0)</p><p>氧气有自旋，电子占据问题，高斯软件的高斯基组可以计算能量，但是vasp的平面波无法计算<a href="https://www.bilibili.com/video/BV1pB4y1A7Ae/?spm_id_from=333.788&vd_source=3fde33be3f37f952ed046ee6301aa448">DFT学习11-VASP和高斯计算有何不同_哔哩哔哩_bilibili</a></p><p>自旋极化计算需要把ISYM 设置为0（<a href="https://www.bigbrosci.com/2017/10/30/ex08/">Ex08 氧原子能量的正确计算 | Learn VASP The Hard Way (bigbrosci.com)</a>）</p></li><li><p>优化基底 (固定c轴的优化)</p></li><li><p>优化基团+基底 （ISIF&#x3D;2 即固定晶格，催化是化学吸附，不需要考虑范德瓦尔斯修正(VDW)，但需要考虑零点振动能的能量修正）</p><p><strong>进行频率计算校正能量时，由于只能使用NPAR&#x3D;1,所以用结构优化的k点数量算频率很不划算，很慢。测试发现用Gamma点计算后修正的G值的量变化只有几个meV。可以直接用Gamma点计算。</strong></p></li><li><p>对基团+基底进行自由能校正(需要固定住基底原子，selective dynamics ,只放开吸附的分子做计算)</p></li><li><p>进行分电势的台阶图计算</p></li><li><p>过电势由能量变化最大的一步减去1.23eV&#x2F;e 得到</p></li></ol><h2 id="2-需要注意的计算细节"><a href="#2-需要注意的计算细节" class="headerlink" title="2.需要注意的计算细节"></a>2.需要注意的计算细节</h2><ul><li><p>优化二维材料需要用固定一个晶格的优化，而不是全部打开</p><p>OPTCELL</p></li></ul><pre><code class="shell"># 固定c轴进行优化，不希望改变和c轴的夹角100110000</code></pre><ul><li><p>磁性元素ISPIN &#x3D;2</p></li><li><p>优化吸附物的时候用固定晶格的优化就可以了</p></li><li><p>第一性原理计算不能直接计算双原子分子的能量，有较大误差</p></li></ul><hr><h3 id="1-自由能的计算（计算频率以修正自由能）："><a href="#1-自由能的计算（计算频率以修正自由能）：" class="headerlink" title="1.自由能的计算（计算频率以修正自由能）："></a>1.自由能的计算（计算频率以修正自由能）：</h3><p>通常的计算中只考虑了晶体的势能而没有考虑零点振动能及温度变化导致的电子能对能量的贡献。通过计算气相分子的频率得到振动相关的配分函数，进而可以计算振动对能量的贡献。</p><p>计算溶液分子的自由能可以通过饱和蒸汽压的方法shi’xian</p><ol><li>计算基团的频率振动</li></ol><pre><code class="shell">EDIFF = 1E-7IBRION = 5 #有限差分海森矩阵POTIM =0.015  #步长NFREE =2 #中心差分的算法NSW = 1ISIF =2 ISYM = 0固定基底的原子(by vaspkit) selected dynamics</code></pre><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240913211253982.png" alt="image-20240913211253982"></p><p>计算完成后查看频率</p><p><code> grep cm OUTCAR</code></p><p>校正自由能使用 vaspkit 501</p><hr><h1 id="2-碱性-酸性环境下的催化"><a href="#2-碱性-酸性环境下的催化" class="headerlink" title="2. 碱性&#x2F;酸性环境下的催化"></a>2. 碱性&#x2F;酸性环境下的催化</h1><blockquote><p><a href="https://www.bilibili.com/video/av67721985/?vd_source=3fde33be3f37f952ed046ee6301aa448">超详细电催化台阶图计算步骤，细节拉满【电催化课程1】_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1BK4y1d73H/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">DFT16-碱性条件下OER的计算_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1aH4y1278C/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">催化OER计算：PH值对反应自由能影响 | 【华算科技朱老师讲DFT-VASP】_哔哩哔哩_bilibili</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240726091418857.png" alt="image-20240726091418857"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240725163001124.png" alt="image-20240725163001124"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240926102947433.png" alt="image-20240926102947433"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240926103042908.png" alt="image-20240926103042908"></p><blockquote><p><strong>Selectively nitrogen-doped carbon materials as  superior metal-free catalysts for oxygen reduction</strong></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240726142836671.png" alt="image-20240726142836671"></p><h1 id="3-HER-析氢反应"><a href="#3-HER-析氢反应" class="headerlink" title="3. HER 析氢反应"></a>3. HER 析氢反应</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1Fe411F7yK/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">析氢反应（HER）计算_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV19CgoeKEz8/?spm_id_from=333.337.search-card.all.click&vd_source=3fde33be3f37f952ed046ee6301aa448">吸附与催化：HER反应计算_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV17K411K7oH/?vd_source=3fde33be3f37f952ed046ee6301aa448">老司机公开课3 | 计算电催化专题 2小时干货拉满_哔哩哔哩_bilibili</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240919202401459.png" alt="image-20240919202401459"> </p><p>酸性条件下的HER，1.需要吸热的部分加个电压就克服了；2.并不是放热越大越好，因为第二步脱氢的时候也会越大，所以绝对值越小越好</p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920110028493.png" alt="image-20240920110028493"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920110053716.png" alt="image-20240920110053716"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920110558249.png" alt="image-20240920110558249"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920110632396.png" alt="image-20240920110632396"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920110618106.png" alt="image-20240920110618106"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920112512564.png" alt="image-20240920112512564"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920112427558.png" alt="image-20240920112427558"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920112434745.png" alt="image-20240920112434745"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920112455211.png" alt="image-20240920112455211"></p><blockquote><p><a href="https://www.researchgate.net/publication/352363498_Macroporous_Array_Induced_Multiscale_Modulation_at_the_SurfaceInterface_of_CoOH2NiMo_Self-Supporting_Electrode_for_Effective_Overall_Water_Splitting?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6Il9kaXJlY3QiLCJwYWdlIjoiX2RpcmVjdCJ9fQ">Macroporous Array Induced Multiscale Modulation at the Surface&#x2F;Interface of Co(OH)2&#x2F;NiMo Self‐Supporting Electrode for Effective Overall Water Splitting</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920141930381.png" alt="image-20240920141930381"></p><blockquote><p><a href="https://www.researchgate.net/publication/342964851_Trends_in_Alkaline_Hydrogen_Evolution_Activity_on_Cobalt_Phosphide_Electrocatalysts_Doped_with_Transition_Metals?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6Il9kaXJlY3QiLCJwYWdlIjoiX2RpcmVjdCJ9fQ">Trends in Alkaline Hydrogen Evolution Activity on Cobalt Phosphide Electrocatalysts Doped with Transition Metals</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920142618174.png" alt="image-20240920142618174"></p><blockquote><p><a href="https://www.researchgate.net/publication/357180559_Review_of_the_Hydrogen_Evolution_Reaction-A_Basic_Approach?_tp=eyJjb250ZXh0Ijp7ImZpcnN0UGFnZSI6Il9kaXJlY3QiLCJwYWdlIjoiX2RpcmVjdCJ9fQ">Review of the Hydrogen Evolution Reaction—A Basic Approach</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920142752619.png" alt="image-20240920142752619"></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920142919588.png" alt="image-20240920142919588"></p><blockquote><p><a href="https://www.sciencedirect.com/science/article/pii/S2211285520312180">https://www.sciencedirect.com/science/article/pii/S2211285520312180</a></p></blockquote><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920143350032.png" alt="image-20240920143350032"></p><p><a href="https://pubs.rsc.org/en/content/articlepdf/2023/nr/d3nr01940c">https://pubs.rsc.org/en/content/articlepdf/2023/nr/d3nr01940c</a></p><p><img src="/./../../%E5%9B%BE%E7%89%87/image-20240920144432901.png" alt="image-20240920144432901"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-关于催化理论知识&quot;&gt;&lt;a href=&quot;#1-关于催化理论知识&quot; class=&quot;headerlink&quot; title=&quot;1. 关于催化理论知识&quot;&gt;&lt;/a&gt;1. 关于催化理论知识&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Bifu</summary>
      
    
    
    
    <category term="模拟方法" scheme="http://example.com/categories/%E6%A8%A1%E6%8B%9F%E6%96%B9%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
